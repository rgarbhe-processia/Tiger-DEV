package pss.cadbom;

import java.io.BufferedReader;
import java.io.StringReader;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.Vector;
import java.util.*;

import com.dassault_systemes.enovia.enterprisechangemgt.util.ChangeUtil;
import com.dassault_systemes.vplm.modeler.PLMCoreModelerSession;
import com.matrixone.apps.common.Route;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.DomainSymbolicConstants;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkException;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MailUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MessageUtil;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.domain.util.UOMUtil;
import com.matrixone.apps.domain.util.i18nNow;
import com.matrixone.apps.engineering.EngineeringUtil;
import com.matrixone.apps.framework.ui.UICache;
import com.matrixone.apps.framework.ui.UIUtil;
import com.matrixone.apps.library.LibraryCentralConstants;
import com.mbom.modeler.utility.FRCMBOMModelerAPI;
import com.mbom.modeler.utility.FRCMBOMModelerUtility;
import com.matrixone.apps.domain.util.PersonUtil;

import matrix.db.Access;
import matrix.db.BusinessObject;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.Policy;
import matrix.db.RelationshipType;
import matrix.util.Pattern;
import matrix.util.StringList;
import pss.constants.TigerConstants;

public class Material_mxJPO {
    // This function to be called to add the route to Life-cycle. It will be executed on Action Trigger on create Event of type PSS_Material_Request.

    // TIGTK-5405 - 11-04-2017 - VB - START
    protected static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(Material_mxJPO.class);

    // TIGTK-5405 - 11-04-2017 - VB - END
    // ALM-2719 - 29-11-2018 mkakade -START
    public String strLanguageStr = ""; // sml4 added for group attributes order BUG

    private HashMap tempMap_Cache = new HashMap(); // sml4 added for group attributes order BUG
    // ALM-2719 - 29-11-2018 mkakade -END

    public static final String RPE_FROM_CONNECT_MATERIAL = "FROM_CONNECT_MATERIAL";

    public int addRouteToMaterialRequest(Context context, String[] args) throws Exception {
        String ROUTE_BASE_PURPOSE_APPROVAL = "Approval";
        String ROUTE_REVISION = "1";
        String defaultRDOName = EngineeringUtil.getDefaultOrganization(context);

        String RouteTemplateName = "Validate Material Request_" + defaultRDOName;

        String sOID = args[0];
        DomainObject domObj = DomainObject.newInstance(context, sOID);
        String strPolicy = domObj.getInfo(context, DomainConstants.SELECT_POLICY);

        if (!TigerConstants.POLICY_PSS_MATERIAL_REQUEST.equals(strPolicy)) {
            return 0;
        }

        StringList busSelects = new StringList();
        busSelects.add(DomainConstants.SELECT_NAME);
        busSelects.add(DomainConstants.SELECT_ID);
        busSelects.add(DomainConstants.SELECT_REVISION);
        busSelects.add(DomainConstants.SELECT_DESCRIPTION);

        MapList mlRouteTemplates = DomainObject.findObjects(context, DomainConstants.TYPE_ROUTE_TEMPLATE, // Type Pattern
                RouteTemplateName, // Name Pattern
                DomainConstants.QUERY_WILDCARD, // Revision Pattern
                DomainConstants.QUERY_WILDCARD, // Owner Pattern
                TigerConstants.VAULT_ESERVICEPRODUCTION, // Vault Pattern
                null, // Where Expression
                true, // Expand Type
                busSelects); // Object Pattern

        if (mlRouteTemplates.size() > 0) {

            @SuppressWarnings("unchecked")
            Map<String, String> mRouteTemplate = (Map<String, String>) mlRouteTemplates.get(0);

            String strRouteTemplateId = (String) mRouteTemplate.get(DomainConstants.SELECT_ID);

            String strDescriptionTemplate = (String) mRouteTemplate.get(DomainConstants.SELECT_DESCRIPTION);

            String strName = DomainObject.getAutoGeneratedName(context, DomainSymbolicConstants.SYMBOLIC_type_Route, "");

            Route newRoute = new Route();
            newRoute.createObject(context, DomainConstants.TYPE_ROUTE, strName, ROUTE_REVISION, DomainConstants.POLICY_ROUTE, context.getVault().getName());
            String strRouteId = newRoute.getInfo(context, DomainConstants.SELECT_ID);
            newRoute.setDescription(context, strDescriptionTemplate);

            // Create new Route using Route Template
            newRoute.setAttributeValue(context, DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE, ROUTE_BASE_PURPOSE_APPROVAL);

            newRoute.connectTemplate(context, strRouteTemplateId);

            newRoute.addMembersFromTemplate(context, strRouteTemplateId);

            newRoute.setId(strRouteId); // addMembersFromTemplate was setting the route id as route task user id, so setting again

            // Add Relationship
            DomainRelationship dRel = newRoute.addRelatedObject(context, new RelationshipType(DomainConstants.RELATIONSHIP_OBJECT_ROUTE), true, sOID);

            try {
                // Add Attribute to Relationship
                Map<String, String> mapAttribute = new HashMap<String, String>();
                mapAttribute.put(DomainConstants.ATTRIBUTE_ROUTE_BASE_POLICY, "policy_PSS_Material_Request");
                mapAttribute.put(DomainConstants.ATTRIBUTE_ROUTE_BASE_STATE, "state_Create");
                mapAttribute.put(DomainConstants.ATTRIBUTE_ROUTE_BASE_PURPOSE, ROUTE_BASE_PURPOSE_APPROVAL);
                dRel.setAttributeValues(context, mapAttribute);

            } catch (Exception e) {
                // TIGTK-5405 - 11-04-2017 - VB - START
                logger.error("Error in addRouteToMaterialRequest: ", e);
                // TIGTK-5405 - 11-04-2017 - VB - END
            }
        }

        return 0;
    }// method ended.....

    // This function is to be called to set the State of Policy based on task approval/rejection status.

    public int promoteMaterialRequest(Context context, String[] args) throws Exception {

        String Cancelled = "Cancelled";
        String ApprovalStatus_REJECT = "Reject";

        String strobjectId = args[0];
        StringList selectStmts = new StringList(4);
        selectStmts.addElement(DomainConstants.SELECT_ID);
        selectStmts.addElement(DomainConstants.SELECT_POLICY);

        StringList relStmts = new StringList(4);
        relStmts.addElement("id[connection]");
        DomainObject domInboxTaskObject = DomainObject.newInstance(context, strobjectId);

        MapList mlObjRoute = domInboxTaskObject.getRelatedObjects(context, DomainConstants.RELATIONSHIP_ROUTE_TASK, // relationship pattern
                DomainConstants.TYPE_ROUTE, // object pattern
                selectStmts, // object selects
                relStmts, // relationship selects
                false, // to direction
                true, // from direction
                (short) 1, // recursion level
                null, // object where clause
                null, // relationship where clause
                0);
        if (mlObjRoute.size() > 0) {
            Map objRouteMap = (Map) mlObjRoute.get(0);
            String sOIDRoute = (String) objRouteMap.get(DomainConstants.SELECT_ID);
            DomainObject domRoutebject = new DomainObject(sOIDRoute);
            StringList busSelects = new StringList();
            busSelects.add(DomainConstants.SELECT_NAME);
            busSelects.add(DomainConstants.SELECT_REVISION);
            MapList mlConnectedObject = domRoutebject.getRelatedObjects(context, DomainConstants.RELATIONSHIP_OBJECT_ROUTE, // relationship pattern
                    TigerConstants.TYPE_PSS_MATERIAL_REQUEST, // object pattern
                    selectStmts, // object selects
                    relStmts, // relationship selects
                    true, // to direction
                    false, // from direction
                    (short) 1, // recursion level
                    null, // object where clause
                    null, 0);
            if (mlConnectedObject.size() > 0) {
                Map connectedObjMap = (Map) mlConnectedObject.get(0);

                String sObjectID = (String) connectedObjMap.get(DomainConstants.SELECT_ID);

                DomainObject domTypebject = DomainObject.newInstance(context, sObjectID);
                String current = domTypebject.getInfo(context, DomainConstants.SELECT_CURRENT);
                if (domTypebject.isKindOf(context, TigerConstants.TYPE_PSS_MATERIAL_REQUEST) && current.equals(TigerConstants.STATE_PSS_MATERIAL_REQUEST_CREATE)) {
                    String strTaskApprovalStatus = domInboxTaskObject.getAttributeValue(context, DomainConstants.ATTRIBUTE_APPROVAL_STATUS);

                    if (ApprovalStatus_REJECT.equals(strTaskApprovalStatus)) // If Rejected
                    {
                        domTypebject.setAttributeValue(context, TigerConstants.ATTRIBUTE_BRANCH_TO, Cancelled);
                    }

                    domTypebject.promote(context); // Promote Route
                }
            }
        }

        return 0;
    }

    // method end..

    /**
     * Method to get the connected Parts to PSS_Material Object.
     * @param context
     * @param args
     * @return MapList - Contains the "Object Id" and "Relationship Id" of Parts which are connected to PSS_Material Object.
     * @throws Exception
     */
    public MapList getAllRelatedPartsForMaterial(Context context, String[] args) throws Exception {

        HashMap<String, String> programMap = (HashMap) JPO.unpackArgs(args);
        String strMaterialObjectId = (String) programMap.get("objectId");

        DomainObject domMaterialObject = DomainObject.newInstance(context, strMaterialObjectId);

        StringList lstSelectStmts = new StringList();
        StringList lstRelStmts = new StringList();

        lstSelectStmts.add(DomainConstants.SELECT_ID);
        lstRelStmts.add(DomainConstants.SELECT_RELATIONSHIP_ID);

        // MapList containing the "Parts" connected to "Material" with "PSS_Material" relationship
        MapList mlConnectedPartsList = domMaterialObject.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PSS_MATERIAL, DomainConstants.TYPE_PART, lstSelectStmts, lstRelStmts, true, false,
                (short) 0, null, null, 0);
        return mlConnectedPartsList;

    }

    /**
     * Method to get all the Connected "PSS_Material" Object on Part
     * @param context
     * @param args
     * @return MapList - Contains the "Object Id" and "Relationship Id" of PSS_Material Objects which are connected with Context Part.
     * @throws Exception
     */
    public MapList getMaterialOnPart(Context context, String[] args) throws Exception {

        /* 14/09/16 Steepgraph comments : START */

        Pattern typePattern = new Pattern(TigerConstants.TYPE_PROCESSCONTINUOUSPROVIDE);
        typePattern.addPattern(TigerConstants.TYPE_PROCESS_CONTINUOUS_CREATE_MATERIAL);
        /* Steepgraph comments : END */

        HashMap<String, String> programMap = (HashMap) JPO.unpackArgs(args);
        String strPartObjectId = (String) programMap.get("objectId");

        DomainObject domPartObject = DomainObject.newInstance(context, strPartObjectId);

        StringList lstSelectStmts = new StringList();
        StringList lstRelStmts = new StringList();

        lstSelectStmts.add(DomainConstants.SELECT_ID);
        lstRelStmts.add(DomainConstants.SELECT_RELATIONSHIP_ID);

        // MapList containing the "PSS_Material" connected with "Parts" using "PSS_Material" relationship

        MapList mlConnectedMaterialsList = domPartObject.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PSS_MATERIAL, typePattern.getPattern(), lstSelectStmts, lstRelStmts, false, true,
                (short) 0, null, null, 0);

        return mlConnectedMaterialsList;
    }

    /**
     * This Method is called to check if any "PSS_Material" object has connected Parts to it,before Promoting "PSS_Material" Object from "Approved" to "Cancelled" state.
     * @param context
     * @param args
     *            -- "Object Id" of context Object
     * @return int - Returns the status whether to Promote or Restrict the Context Object
     * @throws Exception
     */
    public int restrictMaterialCancellation(Context context, String[] args) throws Exception {
        String STATE_OBSOLOETE = "Obsolete";
        int intRestrictOrPromoteStatus = 0;
        String strSourceMaterialObjectId = args[0];
        DomainObject domSourceMaterialObj = DomainObject.newInstance(context, strSourceMaterialObjectId);

        StringList lstSelectStmts = new StringList();
        StringList lstRelStmts = new StringList();

        lstSelectStmts.add(DomainConstants.SELECT_ID);
        lstSelectStmts.add(DomainConstants.SELECT_CURRENT);
        lstSelectStmts.add(DomainConstants.SELECT_POLICY);

        lstRelStmts.add(DomainConstants.SELECT_RELATIONSHIP_ID);
        // TIGTK-7253: AGE :Start
        Pattern relationshipPattern = new Pattern(TigerConstants.RELATIONSHIP_PSS_MATERIAL);
        relationshipPattern.addPattern(TigerConstants.RELATIONSHIP_PROCESS_INSTANCE_CONTINUOUS);

        Pattern typePattern = new Pattern(DomainConstants.TYPE_PART);
        typePattern.addPattern(TigerConstants.TYPE_CREATEMATERIAL);
        typePattern.addPattern(TigerConstants.TYPE_CREATEKIT);
        typePattern.addPattern(TigerConstants.TYPE_CREATEASSEMBLY);
        // MapList containing the "Parts" connected to "Material" with "PSS_Material" relationship
        MapList mlConnectedPartsList = domSourceMaterialObj.getRelatedObjects(context, relationshipPattern.getPattern(), typePattern.getPattern(), lstSelectStmts, lstRelStmts, true, false, (short) 0,
                null, null, 0);
        // TIGTK-7253: AGE :END
        int intConnectedPartsListSize = mlConnectedPartsList.size();

        if (intConnectedPartsListSize > 0) {
            for (int intIndex = 0; intIndex < intConnectedPartsListSize; intIndex++) {
                Map<String, String> mapConnectedParts = (Map<String, String>) mlConnectedPartsList.get(intIndex);
                String strCurrentState = (String) mapConnectedParts.get(DomainConstants.SELECT_CURRENT);

                if (strCurrentState.equals(STATE_OBSOLOETE)) {

                    intRestrictOrPromoteStatus = 0;

                    // return intRestrictOrPromoteStatus;
                } else {

                    intRestrictOrPromoteStatus = 1;
                    break;

                }

            }
            if (intRestrictOrPromoteStatus == 1) {
                String strAlertMessage = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentralStringResource", "emxEngineeringCentral.Alert.PSS_MaterialsHasNonObsoletePartsConnected",
                        context.getSession().getLanguage());

                MqlUtil.mqlCommand(context, "notice $1", strAlertMessage);
            }

        } else {
            intRestrictOrPromoteStatus = 0;
        }

        return intRestrictOrPromoteStatus;
    }

    /**
     * This method is used to Restrict the Material Request from Closing unless it is connected a Material which is in Approved state
     * @param context
     *            -- User Agent has been set as context
     * @param args
     *            -- material Object ID is passed as an argument
     * @return -- zero if trigger passes and returns one if trigger fails
     * @throws Exception
     */
    public int restrictMaterialRequestFromClosing(Context context, String[] args) throws Exception {
        // final String RELATIONSHIP_PSS_MATERIAL_REQUEST = PropertyUtil.getSchemaProperty(context, "relationship_PSS_Material_Request");
        // TIGTK-17348 mkakade - START
        final String RELATIONSHIP_PSS_MATERIAL_REQUEST_RELATED_REFERENCES = PropertyUtil.getSchemaProperty(context, "relationship_PSS_MaterialRequestRelatedReferences");
        // TIGTK-17348 mkakade - END

        String STATE_APPROVED = "Approved";

        int intstatus = 0;
        boolean boolNoApprovedMaterialConnected = false;
        try {

            String strMaterialRequestObjID = args[0];

            DomainObject domobjMaterialRequest = new DomainObject(strMaterialRequestObjID);

            StringList lstselectStmts = new StringList(3);
            lstselectStmts.addElement(DomainConstants.SELECT_ID);
            lstselectStmts.addElement(DomainConstants.SELECT_TYPE);
            lstselectStmts.addElement(DomainConstants.SELECT_NAME);

            StringList lstrelStmts = new StringList();
            lstrelStmts.add(DomainConstants.SELECT_RELATIONSHIP_NAME);
            // TIGTK-17348 mkakade - START
            // Pattern relPattern = new Pattern(DomainConstants.RELATIONSHIP_REFERENCE_DOCUMENT);
            Pattern relPattern = new Pattern(RELATIONSHIP_PSS_MATERIAL_REQUEST_RELATED_REFERENCES);
            // TIGTK-17348 mkakade - END

            Pattern typePattern = new Pattern(TigerConstants.TYPE_PROCESSCONTINUOUSPROVIDE);
            typePattern.addPattern(TigerConstants.TYPE_PROCESS_CONTINUOUS_CREATE_MATERIAL);
            // TIGTK-17348 mkakade - START
            MapList mlMatObject = domobjMaterialRequest.getRelatedObjects(context, relPattern.getPattern(), typePattern.getPattern(), lstselectStmts, lstrelStmts, false, true, (short) 1, null, null,
                    0);
            // TIGTK-17348 mkakade - END
            for (int i = 0; i < mlMatObject.size(); i++) {
                Map<String, String> mlMaterialObject = (Map<String, String>) mlMatObject.get(i);
                String strMaterialObjectId = (String) mlMaterialObject.get(DomainConstants.SELECT_ID);

                DomainObject domobjMaterial = new DomainObject(strMaterialObjectId);
                String strmaterialState = domobjMaterial.getInfo(context, DomainConstants.SELECT_CURRENT);

                if (!strmaterialState.equals(STATE_APPROVED)) {
                    boolNoApprovedMaterialConnected = true;
                    break;
                }
            }

            if (mlMatObject.size() == 0 || boolNoApprovedMaterialConnected) {
                intstatus = 1;
                // TIGTK-7102 : TS : 12/07/2017 : START
                // MBOM:PHASE2.0 : TIGTK-7102 : PSE : 21-07-2017 : START
                String stralertMessage = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentralStringResource", context.getLocale(),
                        "emxEngineeringCentral.Alert.PSS_ReleasedMaterialNotConnectedToMaterialRequest");
                // MBOM:PHASE2.0 : TIGTK-7102 : PSE : 21-07-2017 : END
                // TIGTK-7102 : TS : 12/07/2017 : END
                MqlUtil.mqlCommand(context, "notice $1", stralertMessage);
            }

        } catch (Exception e) {
            // TIGTK-5405 - 11-04-2017 - VB - START
            logger.error("Error in restrictMaterialRequestFromClosing: ", e);
            // TIGTK-5405 - 11-04-2017 - VB - END
        }
        return intstatus;
    }

    /**
     * This method is used to auto populate the description field from the listed attributes of context type
     * @param context
     * @param args
     *            -- material Object ID is passed as an argument
     * @throws Exception
     *             returns -- nothing
     */
    public void populateAutoDescription(Context context, String args[]) throws Exception {
        ContextUtil.pushContext(context, PropertyUtil.getSchemaProperty(context, "person_UserAgent"), DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
        try {
            String strLanguage = context.getSession().getLanguage();
            String strmaterialObjectId = args[0];
            String strEventName = args[1];
            String strCurrentState = args[2];
            DomainObject domobjMaterial = DomainObject.newInstance(context, strmaterialObjectId);
            String strautoDescriptionAttributes = "";
            Map AttributeMap = domobjMaterial.getAttributeMap(context, true);
            StringList lstselectStmts = new StringList(1);
            lstselectStmts.addElement(DomainConstants.SELECT_NAME);
            lstselectStmts.addElement(DomainConstants.SELECT_ID);
            lstselectStmts.addElement(DomainConstants.SELECT_ORGANIZATION);
            // TIGTK-9034 - 28-08-2017 - PTE - START
            if (UIUtil.isNullOrEmpty(strCurrentState)) {
                strCurrentState = domobjMaterial.getInfo(context, DomainConstants.SELECT_CURRENT);
            }
            if ((strEventName.endsWith("Modify") && (strCurrentState.equals(TigerConstants.STATE_PSS_MATERIAL_INWORK)))
                    || (strEventName.endsWith("Promote") && (strCurrentState.equals(TigerConstants.STATE_MATERIAL_APPROVED)))) {
                // TIGTK-9034 - 28-08-2017 - PTE - END
                MapList mlobjMapList = domobjMaterial.getRelatedObjects(context,

                        DomainConstants.RELATIONSHIP_CLASSIFIED_ITEM, // relationship pattern......
                        TigerConstants.TYPE_GENERAL_CLASS, // object pattern
                        lstselectStmts, // object selects
                        null, // relationship selects
                        true, // to direction
                        false, // from direction
                        (short) 1, // recursion level
                        null, // object where clause
                        null, 0);

                if (mlobjMapList.size() > 0) {

                    Map<String, String> mapGeneralClass = (Map<String, String>) mlobjMapList.get(0);
                    String strGeneralClassName = (String) mapGeneralClass.get(DomainConstants.SELECT_NAME);
                    strGeneralClassName = strGeneralClassName.trim().replace(" ", "_");
                    // PHASE1.1 : TIGTK-9606 : END
                    // PHASE1.1 : TIGTK-9606 : END
                    String strGeneralClassOrganization = (String) mapGeneralClass.get(DomainConstants.SELECT_ORGANIZATION);
                    try {
                        strautoDescriptionAttributes = EnoviaResourceBundle.getProperty(context,
                                "emxEngineeringCentral.PSS_Material.PSS_AutoDescriptionField.AttributeList." + strGeneralClassOrganization + "." + strGeneralClassName);

                    } catch (Exception e) {
                        strautoDescriptionAttributes = "";
                    }
                    if (UIUtil.isNotNullAndNotEmpty(strautoDescriptionAttributes)) {

                        StringList lstautoDesAttributesList = FrameworkUtil.split(strautoDescriptionAttributes, ",");
                        // int intAttributeListSize = lstautoDesAttributesList.size();
                        StringBuffer strAttributeValuesBuffer = new StringBuffer();

                        if ((lstautoDesAttributesList != null)) {
                            // Added for error found by find bug : 08/11/2016 : START
                            int intAttributeListSize = lstautoDesAttributesList.size();
                            // Added for error found by find bug : 08/11/2016 : END
                            for (int intIndex = 0; intIndex < intAttributeListSize; intIndex++) {
                                String strattributes = (String) lstautoDesAttributesList.get(intIndex);
                                if (strattributes.startsWith("attribute_")) {
                                    String strattribOrgName = PropertyUtil.getSchemaProperty(context, strattributes);
                                    String strattribValue = (String) AttributeMap.get(strattribOrgName);
                                    // TIGTK -8127 :Modified on 31/05/2017 by SIE :Start

                                    String attrNameForDisplay = i18nNow.getRangeI18NString(strattribOrgName, strattribValue, strLanguage);
                                    // TIGTK-9603 : START
                                    // TIGTK-9603 : START
                                    if (UIUtil.isNotNullAndNotEmpty(attrNameForDisplay) && !attrNameForDisplay.equalsIgnoreCase(TigerConstants.ATTR_VALUE_UNASSIGNED)) {
                                        strAttributeValuesBuffer.append(" " + attrNameForDisplay);
                                        // TIGTK -8127 :Modified on 31/05/2017 by SIE :End
                                    }
                                } else {
                                    String strconstants = (String) lstautoDesAttributesList.get(intIndex);
                                    strAttributeValuesBuffer.append(" " + strconstants);
                                }
                            } // end of for loop
                            String strdesValue = strAttributeValuesBuffer.toString();

                            domobjMaterial.setDescription(context, strdesValue);
                        } // end of if
                    }
                }
            }
        } // end of try block
        catch (RuntimeException e) {
            logger.error("Error in populateAutoDescription: ", e);
            throw e;
        } catch (Exception e) {
            // TIGTK-5405 - 11-04-2017 - VB - START
            logger.error("Error in populateAutoDescription: ", e);
            // TIGTK-5405 - 11-04-2017 - VB - END
        } // end of catch
        finally {
            ContextUtil.popContext(context);
        } // end of finally block
    }// end of method

    /**
     * To connect the General Class to the Material getting created.
     * @param context
     * @param args
     * @return Map
     * @throws Exception
     */
    public Object connectMaterialToGeneralClass(Context context, String[] args) throws Exception {

        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap paramMap = (HashMap) programMap.get("paramMap");

        String strMaterialId = (String) paramMap.get("objectId");

        String newGeneralClassIds = (String) paramMap.get("New OID");

        // String strGeneralClassRelationship = RELATIONSHIP_CLASSIFIED_ITEM;
        StringList newGeneralClassList = FrameworkUtil.split(newGeneralClassIds, ",");

        DomainObject doMaterialObj = DomainObject.newInstance(context, strMaterialId);
        if ((newGeneralClassList != null) && !newGeneralClassList.isEmpty()) {
            try {
                ContextUtil.pushContext(context, PropertyUtil.getSchemaProperty(context, "person_UserAgent"), DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);

                // construct array of ids
                if (newGeneralClassList.size() > 0) {

                    Iterator generalClassItr = newGeneralClassList.iterator();
                    while (generalClassItr.hasNext()) {
                        String newGeneralClass = (String) generalClassItr.next();
                        doMaterialObj.setId(strMaterialId);
                        DomainObject domainObjectFromType = DomainObject.newInstance(context, newGeneralClass);

                        DomainRelationship.connect(context, domainObjectFromType, DomainConstants.RELATIONSHIP_CLASSIFIED_ITEM, doMaterialObj);
                    }
                }
            } catch (Exception e) {
                // TIGTK-5405 - 11-04-2017 - VB - START
                logger.error("Error in connectMaterialToGeneralClass: ", e);
                // TIGTK-5405 - 11-04-2017 - VB - END
                throw e;
            } finally {
                ContextUtil.popContext(context);
            }
        }

        return Boolean.TRUE;
    }

    // PHASE1.1 : TIGTK-9606 : START
    /**
     * This method checks if atleast one General Class is connected to the Material object
     * @param context
     * @param args
     *            --Object Id of Part
     * @return -- '0'if success...'1' for failure with error message
     * @throws Exception
     */
    public int checkGeneralClass(Context context, String[] args) throws Exception {
        String strMaterialObjectID = args[0];
        DomainObject dommaterailObject = DomainObject.newInstance(context, strMaterialObjectID);
        StringList lstselectStmts = new StringList(1);
        lstselectStmts.addElement(DomainConstants.SELECT_TYPE);

        MapList mlobjMapList = dommaterailObject.getRelatedObjects(context,

                DomainConstants.RELATIONSHIP_CLASSIFIED_ITEM, // relationship pattern.............check from manan about rel
                TigerConstants.TYPE_GENERAL_CLASS, // object pattern
                lstselectStmts, // object selects
                null, // relationship selects
                true, // to direction
                false, // from direction
                (short) 1, // recursion level
                null, // object where clause
                null, 0);

        if (mlobjMapList.isEmpty()) // check whether General Class is connected..
        {

            String strAlertMessage = EngineeringUtil.i18nStringNow(context, "emxEngineeringCentral.Alert.PSS_GeneralClassNotConnected", context.getSession().getLanguage());
            // emxContextUtil_mxJPO.mqlNotice(context, strAlertMessage);
            MqlUtil.mqlCommand(context, "notice $1", strAlertMessage);
            return 1;

        } else {
            return 0;
        }

    }

    // createJPO for adding interface on material.
    public HashMap createMaterial(Context context, String args[]) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        String strType = (String) programMap.get("TypeActual");
        String strTypeAction = (String) programMap.get("action");
        String strParentID = (String) programMap.get("parentOID");
        HashMap<String, String> retMap = new HashMap<String, String>();
        PLMCoreModelerSession plmSession = null;
        boolean isTransactionActive = false;
        try {
            ContextUtil.startTransaction(context, true);
            isTransactionActive = true;
            context.setApplication("VPLM");
            plmSession = PLMCoreModelerSession.getPLMCoreModelerSessionFromContext(context);
            plmSession.openSession();

            // PSS ALM-2107 fix : START
            PropertyUtil.setRPEValue(context, "PSS_IS_CALLING_FROM_ENOVIA", "true", false);
            // PSS ALM-2107 fix : END

            String strMaterialName = DomainObject.getAutoGeneratedName(context, "type_ProcessContinuousProvide", "");
            Policy policy = new Policy(TigerConstants.POLICY_PSS_MATERIAL);
            String strRevision = DomainConstants.EMPTY_STRING;

            StringBuilder sbRevision = new StringBuilder();
            sbRevision.append(policy.getFirstInMajorSequence(context));
            sbRevision.append(policy.delimiter(context));
            sbRevision.append(policy.getFirstInMinorSequence(context));

            strRevision = sbRevision.toString();

            // newDom.createObject(context, strType, strMaterialName, strRevision, TigerConstants.POLICY_PSS_MATERIAL, TigerConstants.VAULT_VPLM);
            HashMap<String, String> attributes = new HashMap<String, String>();
            String strMaterialId = FRCMBOMModelerUtility.createMBOMContinuousReference(context, plmSession, strType, null, attributes);
            flushSession(plmSession);

            // TIGTK-3422 : START : MBOM
            DomainObject newDom = DomainObject.newInstance(context, strMaterialId);
            newDom.setAttributeValue(context, TigerConstants.ATTRIBUTE_V_NAME, strMaterialName);
            newDom.setAttributeValue(context, TigerConstants.ATTRIBUTE_PLM_EXTERNALID, strMaterialName);
            // TIGTK-3422 : END : MBOM

            newDom.setPolicy(context, TigerConstants.POLICY_PSS_MATERIAL);
            String strChangeString = "modify bus $1 revision $2 name $3;";
            MqlUtil.mqlCommand(context, strChangeString, strMaterialId, strRevision, strMaterialName);

            if (UIUtil.isNotNullAndNotEmpty(strTypeAction) && strTypeAction.equalsIgnoreCase("PSS_Material")) {

                if (UIUtil.isNotNullAndNotEmpty(strParentID)) {
                    Hashtable instanceAttributes = new Hashtable();
                    DomainObject dParentObj = DomainObject.newInstance(context, strParentID);
                    String strParentPhysicalId = dParentObj.getInfo(context, TigerConstants.SELECT_PHYSICALID);
                    String strMaterialPhysicalId = newDom.getInfo(context, TigerConstants.SELECT_PHYSICALID);
                    FRCMBOMModelerUtility.createMBOMInstance(context, plmSession, strParentPhysicalId, strMaterialPhysicalId, instanceAttributes);
                }
                flushAndCloseSession(plmSession);
                if (isTransactionActive) {
                    ContextUtil.commitTransaction(context);
                }
            }
            retMap.put(DomainConstants.SELECT_ID, strMaterialId);
        } catch (Exception e) {
            // TIGTK-5405 - 11-04-2017 - VB - START
            logger.error("Error in createMaterial: ", e);
            flushAndCloseSession(plmSession);
            if (isTransactionActive) {
                ContextUtil.abortTransaction(context);
            }
            // TIGTK-5405 - 11-04-2017 - VB - END
        }
        return retMap;
    }

    /**
     * This method checks if generic and specific material have same general class.
     * @param context
     * @param args
     *            --Object Id of Part
     * @return -- '0'if success...'1' for failure with error message
     * @throws Exception
     */
    public int checkForMaterialType(Context context, String[] args) throws Exception {

        final String SELECT_ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE = String.format("attribute[%s]", TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);
        final String CLASSIFIED_ITEM_FROM_ID = "to[Classified Item].from.id";
        final String ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE_RANGE_GENERIC = "Generic";

        try {
            String strFromObjectId = args[0];
            DomainObject domPartObject = DomainObject.newInstance(context, strFromObjectId);

            StringList lstselectStmts = new StringList(3);
            lstselectStmts.addElement(DomainConstants.SELECT_ID);
            lstselectStmts.addElement(SELECT_ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);
            lstselectStmts.addElement(CLASSIFIED_ITEM_FROM_ID);

            MapList mlobjMapList = domPartObject.getRelatedObjects(context,

                    TigerConstants.RELATIONSHIP_PSS_MATERIAL, // relationship pattern
                    TigerConstants.TYPE_PROCESSCONTINUOUSPROVIDE, // object pattern
                    lstselectStmts, // object selects
                    null, // relationship selects
                    true, // to direction
                    true, // from direction
                    (short) 1, // recursion level
                    null, // object where clause
                    null, 0);

            if (mlobjMapList != null && !mlobjMapList.isEmpty()) {
                String strToObjectId = args[1];
                DomainObject domMaterialObject = DomainObject.newInstance(context, strToObjectId);
                String strNewMaterialType = domMaterialObject.getAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);
                // Modified for TIGTK-6439 : 04/13/2017 : PTE- Starts
                String strNewObj = domMaterialObject.getInfo(context, CLASSIFIED_ITEM_FROM_ID);
                StringList lstGeneralClassNew_list = new StringList();
                lstGeneralClassNew_list.addElement(strNewObj);
                // Modified for TIGTK-6439 : 04/13/2017 : PTE- Ends
                for (int i = 0; i < mlobjMapList.size(); i++) {
                    Map<String, String> mlMaterialObject = (Map<String, String>) mlobjMapList.get(i);

                    String strCurrentMaterialType = (String) mlMaterialObject.get(SELECT_ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);
                    // Modified for TIGTK-6439 : 04/13/2017 : PTE-Starts
                    String StrObjID = mlMaterialObject.get(CLASSIFIED_ITEM_FROM_ID);
                    StringList lstGeneralClassCurrent_list = new StringList();
                    lstGeneralClassCurrent_list.addElement(StrObjID);
                    // Modified for TIGTK-6439 : 04/13/2017 : PTE- Ends
                    if (!strCurrentMaterialType.equalsIgnoreCase(strNewMaterialType)) {
                        boolean isSameGeneralClass = false;

                        for (int j = 0; j < lstGeneralClassNew_list.size(); j++) {
                            String strCurrentGeneralClass = (String) lstGeneralClassNew_list.get(j);
                            if (lstGeneralClassCurrent_list.contains(strCurrentGeneralClass)) {
                                isSameGeneralClass = true;
                                break;
                            }
                        }
                        if (!isSameGeneralClass) {
                            if (strCurrentMaterialType.equalsIgnoreCase(ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE_RANGE_GENERIC)) {
                                String strResult = "The Specific Material you choose is not corresponding to the generic on the Part.Generic and Specific may have the same Classification. Please choose another one.";
                                MqlUtil.mqlCommand(context, "notice $1", strResult);
                                return 1;
                            } else {
                                String strResult = "The generic Material you choose is not corresponding to the Specific on the Part.Generic and Specific may have the same Classification. Please choose another one.";
                                MqlUtil.mqlCommand(context, "notice $1", strResult);
                                return 1;
                            }
                        }
                    }
                } // end of for loop
            }
        } catch (Exception e) {
            // TIGTK-5405 - 11-04-2017 - VB - START
            logger.error("Error in checkForMaterialType: ", e);
            // TIGTK-5405 - 11-04-2017 - VB - END
            throw e;
        }
        return 0;
    }

    // Added for TIGTK-7105:Phase-2.0:PKH:Start
    /**
     * This method checks if generic Material has no child.
     * @param context
     * @param args
     * @return -- '0'if success...'1' for failure with error message
     * @throws Exception
     */
    public int checkReleaseMaterial(Context context, String[] args) throws Exception {
        int iResult = 0;
        try {
            String strObjectId = args[0];
            DomainObject domObject = DomainObject.newInstance(context, strObjectId);
            String strCurType = domObject.getInfo(context, DomainConstants.SELECT_TYPE);
            String strNewMaterialType = domObject.getAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);
            StringList slTypes = domObject.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PROCESS_INSTANCE_CONTINUOUS + "].to.id");
            if (strNewMaterialType.equalsIgnoreCase("Generic")) {

                if (slTypes.size() > 0) {

                    String strAlertMessage = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentralStringResource", context.getLocale(), "emxEngineeringCentral.Alert.GenericMaterial");

                    MqlUtil.mqlCommand(context, "notice $1", strAlertMessage);
                    iResult = 1;
                }
            } else if (strNewMaterialType.equalsIgnoreCase("Specific")) {

                for (int i = 0; i < slTypes.size(); i++) {
                    String strId = (String) slTypes.get(i);
                    DomainObject domTypeObject = DomainObject.newInstance(context, strId);
                    String strType = domTypeObject.getInfo(context, DomainConstants.SELECT_TYPE);
                    String strChildMaterialType = domTypeObject.getAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);

                    if (strCurType.equalsIgnoreCase(TigerConstants.TYPE_PSS_PAINTSYSTEM)) {

                        if (!strType.equals(TigerConstants.TYPE_PSS_PAINTLACK)) {

                            String strAlertForPaintSystem = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentralStringResource", context.getLocale(),
                                    "emxEngineeringCentral.Alert.PaintSystemSpecificMaterial");

                            MqlUtil.mqlCommand(context, "notice $1", strAlertForPaintSystem);
                            iResult = 1;
                            break;
                        } else if (strType.equals(TigerConstants.TYPE_PSS_PAINTLACK) && (strChildMaterialType.equals("Generic"))) {
                            String strAlertForPaintSystem = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentralStringResource", context.getLocale(),
                                    "emxEngineeringCentral.Alert.PaintSystemSpecificMaterial");

                            MqlUtil.mqlCommand(context, "notice $1", strAlertForPaintSystem);
                            iResult = 1;
                            break;

                        }

                    }

                    else if (strCurType.equalsIgnoreCase(TigerConstants.TYPE_PSS_PAINTLACK) || strCurType.equalsIgnoreCase(TigerConstants.TYPE_PSS_MATERIALMIXTURE)) {

                        if ((!strChildMaterialType.equals("Specific"))) {
                            String strAlertForPaintLack = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentralStringResource", context.getLocale(),
                                    "emxEngineeringCentral.Alert.PaintLackSpecificMaterial");
                            MqlUtil.mqlCommand(context, "notice $1", strAlertForPaintLack);
                            iResult = 1;
                            break;
                        }

                    }
                }
            }

        } catch (Exception e) {
            logger.error("checkReleaseMaterial: ", e);
            throw e;
        }
        return iResult;
    }

    /**
     * This method return ranges of MaterialType attribute.
     * @param context
     * @param args
     * @return -- Range Map
     * @throws Exception
     */
    public HashMap getMaterialTypeRanges(Context context, String[] args) throws Exception {
        HashMap mapRange = new HashMap();
        try {
            String strType = "PSS_ColorMasterbatch";
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            HashMap fieldMap = (HashMap) programMap.get("fieldMap");
            HashMap settingsMap = (HashMap) fieldMap.get("settings");
            HashMap requestMap = (HashMap) programMap.get("requestMap");

            String strSymbolicAttributeName = (String) settingsMap.get("Admin Type");
            String strAttributeName = (String) PropertyUtil.getSchemaProperty(context, strSymbolicAttributeName);

            matrix.db.AttributeType attribName = new matrix.db.AttributeType(strAttributeName);
            attribName.open(context);

            StringList attributeRange = attribName.getChoices();

            String typeName = (String) requestMap.get("type");

            if (typeName != null && !typeName.equals("")) {
                if (typeName.startsWith("_selectedType:")) {

                    StringList typeList = FrameworkUtil.split(typeName, ",");
                    if (typeList.size() > 1) {
                        typeName = (String) typeList.get(0);

                        if (typeName.contains("_selectedType:")) {
                            typeName = typeName.replace("_selectedType:", "");

                            if (typeName.equalsIgnoreCase(strType)) {
                                attributeRange.remove("Generic");

                            }

                        }
                    }
                }
            }
            attribName.close(context);
            mapRange.put("field_choices", attributeRange);
            mapRange.put("field_display_choices", attributeRange);

        } catch (Exception ex) {
            logger.error("Error in getRangeValuesForAttribute: ", ex);
        }
        return mapRange;
    }

    /**
     * This method update value of MaterialType attribute.
     * @param context
     * @param args
     * @return --
     * @throws Exception
     */
    public void updateMaterialTypeValue(Context context, String[] args) throws Exception {
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            Map paramMap = (Map) programMap.get("paramMap");
            String objectId = (String) paramMap.get("objectId");
            String sNewValue = (String) paramMap.get("New Value");
            DomainObject domObj = DomainObject.newInstance(context, objectId);
            domObj.setAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE, sNewValue);
        } catch (Exception ex) {
            logger.error("Error in updateMaterialTypeValue: ", ex);
        }

    }

    // Added for TIGTK-7105:Phase-2.0:PKH:End
    // Added for TIGTK-7110:Phase-2.0:PKH:Start
    /**
     * This method update value of Generic Reference attribute.
     * @param context
     * @param arg
     * @return --
     * @throws Exception
     */
    public void updateGenericRefence(Context context, String[] args) throws Exception {
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            Map paramMap = (Map) programMap.get("paramMap");
            String objectId = (String) paramMap.get("objectId");
            String referecneID = (String) paramMap.get("New OID");
            DomainObject doMaterialObj = DomainObject.newInstance(context, objectId);
            if (UIUtil.isNotNullAndNotEmpty(referecneID)) {
                DomainObject domainObjectToType = DomainObject.newInstance(context, referecneID);
                DomainRelationship.connect(context, doMaterialObj, TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS, domainObjectToType);
            }

        } catch (Exception ex) {
            logger.error("Error in updateGenericRefence: ", ex);
        }

    }

    // Added for TIGTK-7110:Phase-2.0:PKH:End
    // MBOM : PHASE2.0 : TIGTK-7236 : PSE : 05-07-2017 : START
    /**
     * This Method is added to check material is not classified with classification which have "Color Name" or not to decide visibility of "color name edit" channel
     * @name checkColorNameExists
     * @param context
     *            the Matrix Context
     * @throws Exception
     *             if the operation fails
     * @Created By : psalunke
     * @Created on : 05-July-2017
     */
    public int checkColorNameExists(Context context, String[] args) throws Exception {
        try {
            int iResult = 0;
            HashMap<String, String> programMap = (HashMap) JPO.unpackArgs(args);
            String strMaterialId = (String) programMap.get("objectId");
            DomainObject domMaterial = new DomainObject();
            if (UIUtil.isNotNullAndNotEmpty(strMaterialId)) {
                domMaterial = DomainObject.newInstance(context, strMaterialId);
            }
            StringList slClassificationList = domMaterial.getInfoList(context, "to[" + DomainConstants.RELATIONSHIP_CLASSIFIED_ITEM + "]." + DomainConstants.SELECT_FROM_ID);
            if (!slClassificationList.isEmpty()) {
                Map mMaterialAttributeMap = domMaterial.getAttributeMap(context);
                if (mMaterialAttributeMap.containsKey(TigerConstants.ATTRIBUTE_PSS_COLORNAME)) {
                    iResult = 1;
                }
            }
            return iResult;
        } catch (Exception e) {
            logger.error("Exception in pss.cadbom.Material: checkColorNameExists() method : ", e);
            throw e;
        }
    }

    // MBOM : PHASE2.0 : TIGTK-7236 : PSE : 05-07-2017 : END
    // MBOM : PHASE2.0 : TIGTK-7236 : PSE : 06-07-2017 : START
    /**
     * This Method is added connect color to material
     * @name connectColortoMaterial
     * @param context
     *            the Matrix Context
     * @throws Exception
     *             if the operation fails
     * @Created By : psalunke
     * @Created on : 06-July-2017
     */
    public void connectColortoMaterial(Context context, String[] args) throws Exception {
        try {
            HashMap<?, ?> programMap = (HashMap) JPO.unpackArgs(args);
            int flag = 0;
            String strMaterialId = (String) programMap.get("objectId");
            DomainObject domMaterial = new DomainObject();
            if (UIUtil.isNotNullAndNotEmpty(strMaterialId)) {
                domMaterial = DomainObject.newInstance(context, strMaterialId);
            }
            String strMaterialName = domMaterial.getInfo(context, DomainConstants.SELECT_NAME);

            String strType = domMaterial.getInfo(context, DomainConstants.SELECT_TYPE);
            // Check the type of Material
            if (strType.equalsIgnoreCase(TigerConstants.TYPE_PSS_COLORMASTERBATCH)) {
                StringList slColorList = domMaterial.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PSS_COLORLIST + "]." + DomainConstants.SELECT_TO_ID);
                // If the List is not empty ,then set flag as 1;
                if (!slColorList.isEmpty()) {
                    flag = 1;
                }
            }
            // if flag value is 0, then connect all the colors to Material as
            if (flag == 0) {
                String[] idArr = (String[]) programMap.get("emxTableRowId");
                for (int i = 0; i < idArr.length; i++) {
                    StringTokenizer strTokenizer = new StringTokenizer(idArr[i], "|");
                    String strColorOptionObjectId = strTokenizer.nextToken();
                    if (UIUtil.isNotNullAndNotEmpty(strColorOptionObjectId)) {
                        DomainObject domColor = DomainObject.newInstance(context, strColorOptionObjectId);
                        DomainRelationship.connect(context, domMaterial, TigerConstants.RELATIONSHIP_PSS_COLORLIST, domColor);
                    }
                }
            } else if (flag == 1) {
                String strAlertMessage = EnoviaResourceBundle.getProperty(context, "emxFRCMBOMCentralStringResources", context.getLocale(), "PSS_FRCMBOMCentral.connect.ErrorMessage");
                strAlertMessage = strAlertMessage.replace("$<name>", strMaterialName);
                MqlUtil.mqlCommand(context, "notice $1", strAlertMessage);
            }
        } catch (Exception e) {
            logger.error("Exception in pss.cadbom.Material: connectColortoMaterial() method : ", e);
            throw e;
        }
    }

    /**
     * This method is added to display the connected color options of material in table of color options channel
     * @name getColoronMaterial
     * @param context
     *            the Matrix Context
     * @throws Exception
     *             if the operation fails
     * @Created By : psalunke
     * @Created on : 06-July-2017
     */

    public MapList getColoronMaterial(Context context, String[] args) throws Exception {
        try {
            HashMap<String, String> programMap = (HashMap) JPO.unpackArgs(args);
            String strMaterialId = (String) programMap.get("objectId");
            MapList mlConnectedColorList = new MapList();
            if (UIUtil.isNotNullAndNotEmpty(strMaterialId)) {
                DomainObject domMaterial = DomainObject.newInstance(context, strMaterialId);
                // Get all Color Options connected to the Material
                mlConnectedColorList = domMaterial.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PSS_COLORLIST, // relationship pattern
                        TigerConstants.TYPE_PSS_COLOROPTION, // object pattern
                        new StringList(DomainConstants.SELECT_ID), // object selects
                        new StringList(DomainConstants.SELECT_RELATIONSHIP_ID), // relationship selects
                        false, // to direction
                        true, // from direction
                        (short) 0, // recursion level
                        DomainConstants.EMPTY_STRING, // object where clause
                        null, // relationship where clause
                        (short) 0, false, // checkHidden
                        true, // preventDuplicates
                        (short) 1000, // pageSize
                        null, null, null, null);

            }
            return mlConnectedColorList;
        } catch (Exception e) {
            logger.error("Exception in pss.cadbom.Material: connectColortoMaterial() method : ", e);
            throw e;
        }
    }

    /**
     * This Method is added for exclude the already connected Color options of material
     * @name excludeAvailableColorOptions
     * @param context
     *            the Matrix Context
     * @throws Exception
     *             if the operation fails
     * @Created By : psalunke
     * @Created on : 06-July-2017
     */

    public Object excludeAvailableColorOptions(Context context, String[] args) throws Exception {
        try {
            StringList slExcludeOIDList = new StringList();
            HashMap mProgramMap = (HashMap) JPO.unpackArgs(args);
            String strObjectID = (String) mProgramMap.get("objectId");
            if (UIUtil.isNotNullAndNotEmpty(strObjectID)) {
                DomainObject domMaterial = DomainObject.newInstance(context, strObjectID);
                // Get already Connected Color Options
                MapList mlColorOptionList = domMaterial.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PSS_COLORLIST, // relationship pattern
                        TigerConstants.TYPE_PSS_COLOROPTION, // object pattern
                        new StringList(DomainConstants.SELECT_ID), // object selects
                        new StringList(DomainConstants.SELECT_RELATIONSHIP_ID), // relationship selects
                        false, // to direction
                        true, // from direction
                        (short) 0, // recursion level
                        DomainConstants.EMPTY_STRING, // object where clause
                        DomainConstants.EMPTY_STRING, // relationship where clause
                        (short) 0, false, // checkHidden
                        true, // preventDuplicates
                        (short) 1000, // pageSize
                        null, null, null, null);

                // Exclude the objects which are already connected
                if (mlColorOptionList != null && mlColorOptionList.size() > 0) {
                    Iterator itr = mlColorOptionList.iterator();
                    while (itr.hasNext()) {
                        Map mColorOptionMap = (Map) itr.next();
                        slExcludeOIDList.add((String) mColorOptionMap.get(DomainConstants.SELECT_ID));
                    }
                }
            }
            return slExcludeOIDList;
        } catch (Exception e) {
            logger.error("Exception in pss.cadbom.Material : excludeAvailableColorOptions() :" + e);
            throw e;
        }
    }

    // MBOM : PHASE2.0 : TIGTK-7236 : PSE : 06-07-2017 : END
    // MBOM : PHASE2.0 : TIGTK-7237,TIGTK-7238 : PSE : 10-07-2017 : START
    /**
     * This method checks atleast one Color Option should be connected to Material object for its promotion from In Work to Approved state
     * @name checkforConnectedColor
     * @param args
     *            --Object Id
     * @return -- '0'if success...'1' for failure with error message
     * @throws Exception
     *             if the operation fails
     * @Created By : psalunke
     * @Created on : 10-July-2017
     */

    public int checkforConnectedColor(Context context, String[] args) throws Exception {
        try {
            int iResult = 0;
            String strMaterialObjectID = args[0];
            if (UIUtil.isNotNullAndNotEmpty(strMaterialObjectID)) {
                DomainObject domMaterial = DomainObject.newInstance(context, strMaterialObjectID);
                // MBOM:PHASE2.0 : TIGTK-7238 : PSE : 11-07-2017 : START
                String strEvaluateExpr = args[1];
                boolean bTypeCheck = false;
                if (UIUtil.isNotNullAndNotEmpty(strEvaluateExpr)) {
                    String strTypeCheck = domMaterial.getInfo(context, "evaluate[" + strEvaluateExpr + "]");
                    bTypeCheck = Boolean.parseBoolean(strTypeCheck);
                }
                // Check the type of Material
                if (bTypeCheck) {
                    // MBOM:PHASE2.0 : TIGTK-7238 : PSE : 11-07-2017 : END
                    StringList slColorList = domMaterial.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PSS_COLORLIST + "]." + DomainConstants.SELECT_TO_ID);
                    // If the List is not empty ,then set iResult as 1;
                    if (slColorList.isEmpty()) {
                        iResult = 1;
                        String strAlertMessage = EnoviaResourceBundle.getProperty(context, "emxFRCMBOMCentralStringResources", context.getLocale(), "PSS_FRCMBOMCentral.Promote.ErrorMessage");
                        // MBOM:PHASE2.0 : TIGTK-7238 : PSE : 12-07-2017 : START
                        StringList slObjectSelects = new StringList();
                        slObjectSelects.addElement(DomainConstants.SELECT_NAME);
                        slObjectSelects.addElement(DomainConstants.SELECT_TYPE);
                        Map mpMaterialInfoMap = domMaterial.getInfo(context, slObjectSelects);
                        String strMaterialType = (String) mpMaterialInfoMap.get(DomainConstants.SELECT_TYPE);
                        if (strMaterialType.equalsIgnoreCase("PSS_PaintSystem")) {
                            strMaterialType = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(), "emxFramework.Type.PSS_PaintSystem");
                        } else if (strMaterialType.equalsIgnoreCase("PSS_PaintLack")) {
                            strMaterialType = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(), "emxFramework.Type.PSS_PaintLack");
                        } else {
                            strMaterialType = EnoviaResourceBundle.getProperty(context, "emxFrameworkStringResource", context.getLocale(), "emxFramework.Type.PSS_ColorMasterbatch");
                        }
                        strAlertMessage = strAlertMessage.replace("$<type>", (String) strMaterialType);
                        strAlertMessage = strAlertMessage.replace("$<name>", (String) mpMaterialInfoMap.get(DomainConstants.SELECT_NAME));
                        // MBOM:PHASE2.0 : TIGTK-7238 : PSE : 12-07-2017 : END
                        MqlUtil.mqlCommand(context, "notice $1", strAlertMessage);
                    }
                }
            }
            return iResult;
        } catch (Exception e) {
            logger.error("Exception in pss.cadbom.Material : checkforConnectedColor() :" + e);
            throw e;
        }
    }

    /**
     * updateMaterialRefence
     * @param context
     * @param args
     * @throws Exception
     * @author Harika Varanasi for TIGTK-7229
     */
    public void updateMaterialRefence(Context context, String[] args) throws Exception {
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            Map paramMap = (Map) programMap.get("paramMap");
            String objectId = (String) paramMap.get("objectId");
            String referecneID = (String) paramMap.get("New OID");
            if (UIUtil.isNotNullAndNotEmpty(objectId) && UIUtil.isNotNullAndNotEmpty(referecneID)) {
                DomainObject domMaterialObj = DomainObject.newInstance(context, objectId);
                DomainObject domReferenceObject = DomainObject.newInstance(context, referecneID);
                StringList slConnectedMaterials = domMaterialObj.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "]." + DomainConstants.SELECT_ID);
                if (slConnectedMaterials != null && slConnectedMaterials.size() > 0) {
                    String[] strRelArray = new String[slConnectedMaterials.size()];
                    strRelArray = (String[]) slConnectedMaterials.toArray(strRelArray);
                    DomainRelationship.disconnect(context, strRelArray);
                }
                DomainRelationship.connect(context, domMaterialObj, TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS, domReferenceObject);
            }

        } catch (Exception ex) {
            logger.error("Error in updateGenericRefence: ", ex);
        }

    }

    /**
     * updateColorOptions
     * @param context
     * @param args
     * @throws Exception
     * @author Harika Varanasi for TIGTK-7229
     */
    public void updateColorOptions(Context context, String[] args) throws Exception {
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            Map paramMap = (Map) programMap.get("paramMap");
            String objectId = (String) paramMap.get("objectId");
            String referecneID = (String) paramMap.get("New OID");
            if (UIUtil.isNotNullAndNotEmpty(objectId) && UIUtil.isNotNullAndNotEmpty(referecneID)) {
                DomainObject domMaterialObj = DomainObject.newInstance(context, objectId);
                DomainObject domColorOptionObject = DomainObject.newInstance(context, referecneID);
                String REL_PSS_MATERIALMASTERBATCHCOLOROPTIONS = PropertyUtil.getSchemaProperty(context, "relationship_PSS_MaterialMasterBatchColorOptions");
                StringList slConnectedColors = domMaterialObj.getInfoList(context, "from[" + REL_PSS_MATERIALMASTERBATCHCOLOROPTIONS + "]." + DomainConstants.SELECT_ID);
                if (slConnectedColors != null && slConnectedColors.size() > 0) {
                    String[] strRelArray = new String[slConnectedColors.size()];
                    strRelArray = (String[]) slConnectedColors.toArray(strRelArray);
                    DomainRelationship.disconnect(context, strRelArray);
                }
                DomainRelationship.connect(context, domMaterialObj, REL_PSS_MATERIALMASTERBATCHCOLOROPTIONS, domColorOptionObject);
            }
        } catch (Exception ex) {
            logger.error("Error in updateColorOptions: ", ex);
        }
    }

    // Added for TIGTK-7229 : Harika Varanasi : Ends
    // MBOM : PHASE2.0 : TIGTK-7238 : PSE : 11-07-2017 : START
    /**
     * This method use to connect color option to Material
     * @name connectColorOptionsToMaterials
     * @param args
     * @throws Exception
     *             if the operation fails
     * @Created By : psalunke
     * @Created on : 11-July-2017
     */
    public void connectColorOptionsToMaterials(Context context, String[] args) throws Exception {
        try {
            // Get from object Id and To object Id and from type expression
            String strFromObjId = args[0];
            String strToObjId = args[1];
            String strEvaluateExpr = args[2];
            // Check ids are not null or not empty
            if (UIUtil.isNotNullAndNotEmpty(strFromObjId) && UIUtil.isNotNullAndNotEmpty(strToObjId)) {
                DomainObject domFromMaterialObject = DomainObject.newInstance(context, strFromObjId);
                DomainObject domToMaterialObject = DomainObject.newInstance(context, strToObjId);
                // Initialize the bFromTypeCheck as false
                boolean bFromTypeCheck = false;
                // Check from type expression is not null or not empty
                if (UIUtil.isNotNullAndNotEmpty(strEvaluateExpr)) {
                    String strTypeCheck = domFromMaterialObject.getInfo(context, "evaluate[" + strEvaluateExpr + "]");
                    bFromTypeCheck = Boolean.parseBoolean(strTypeCheck);
                }

                if (bFromTypeCheck) {
                    // Get color options from domToMaterialObject and as well as domFromMaterialObject
                    StringList slFromColorOtions = domFromMaterialObject.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PSS_COLORLIST + "]." + DomainConstants.SELECT_TO_ID);
                    StringList slToColorOtions = domToMaterialObject.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PSS_COLORLIST + "]." + DomainConstants.SELECT_TO_ID);
                    // Check color option is already connected or not. if it is already connected, then remove that color option id
                    String strToObjectId = "";
                    StringList slToColorOptionList = new StringList();
                    if (slToColorOtions != null && !slToColorOtions.isEmpty()) {
                        int iToColorOptionsSize = slToColorOtions.size();
                        for (int i = 0; i < iToColorOptionsSize; i++) {
                            strToObjectId = (String) slToColorOtions.get(i);
                            if (!(slFromColorOtions.contains(strToObjectId))) {
                                slToColorOptionList.addElement(strToObjectId);
                            }
                        }
                    }
                    // If slToColorOptionList is not null and not empty, connect those color options to the domFromMaterialObject
                    if (slToColorOptionList != null && !slToColorOptionList.isEmpty()) {
                        DomainRelationship.connect(context, domFromMaterialObject, TigerConstants.RELATIONSHIP_PSS_COLORLIST, true,
                                (String[]) slToColorOptionList.toArray(new String[slToColorOptionList.size()]));
                    }

                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            logger.error("Error in pss.cadbom.Material : connectColorOptionsToMaterials() : ", ex);
        }
    }

    // MBOM : PHASE2.0 : TIGTK-7238 : PSE : 11-07-2017 : END

    // Added for TIGTK-7116:PKH:Phase-2.0:Start
    /***
     * This method is used to display all the Classification Attributes during create Generic Document or Part. If the Class/PF contains Attribute Group all the attributes belonging each Attribute
     * Group is retrieved using getClassClassificationAttributes method. Once the list is obtained settinsMap and filedMap is constructed using getDynamicFieldsDuringCreate Function Function_033728
     * @param context
     * @param args
     * @return MapList
     * @throws Exception
     */
    public MapList getClassificationAttributesForForm(Context context, String[] args) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap requestMap = (HashMap) programMap.get("requestMap");
        String endItemObjectId = (String) requestMap.get("objectId");
        String formName = (String) requestMap.get("form");
        MapList fieldMapList = new MapList();
        String strMode = (String) requestMap.get("mode");
        // ALM-2719 - 29-11-2018 mkakade -START
        strLanguageStr = ((String) ((HashMap) programMap.get("requestMap")).get("languageStr")); // sml4 added for group attributes order BUG
        // ALM-2719 - 29-11-2018 mkakade -END
        MapList classificationAttributesList = new MapList();
        DomainObject endItemObj = new DomainObject(endItemObjectId);
        String strCurrent = endItemObj.getInfo(context, DomainConstants.SELECT_NAME);

        StringList objectSelects = new StringList();
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_NAME);

        MapList classificationList = endItemObj.getRelatedObjects(context, "Classified Item", "*", objectSelects, null, true, // boolean getTo,
                false, // boolean getFrom,
                (short) 0, null, null, 0);

        int noOfClasses = classificationList.size();

        if (noOfClasses > 0) {
            Iterator itr = classificationList.iterator();
            while (itr.hasNext()) {
                Map classMap = (Map) itr.next();

                MapList classificationAttributes = getClassClassificationAttributes(context, (String) classMap.get(DomainConstants.SELECT_ID));
                if (classificationAttributes.size() > 0) {
                    HashMap classificationAttributesMap = new HashMap();
                    classificationAttributesMap.put("className", classMap.get(DomainConstants.SELECT_NAME));
                    classificationAttributesMap.put("attributes", classificationAttributes);

                    classificationAttributesList.add(classificationAttributesMap);
                }
            }

            fieldMapList = getDynamicFieldsMapList(context, classificationAttributesList, formName, strCurrent, false, strMode, endItemObjectId);
        }

        return fieldMapList;
    }

    /**
     * method to get the classification attributes of all the attribute groups connected to the class
     * @param context
     *            the eMatrix <code>Context</code> object
     * @param objectId
     *            - objectId of the class whose attributes are to be returned
     * @returns - a MapList of Attributes Groups, each map with following key-Value Pairs 1) "name" - String containing AttributeGroup name 2) "attributes" - a MapList of Attributes, each map with
     *          following key-Value Pairs 1) "qualifiedName" - String containing qualified name of the Attribute 2) "name" - String containing name of the Attribute 3) "type" - String containing type
     *          of the Attribute 4) "default" - String containing default value of the Attribute 5) "description" - String containing description of the Attribute 6) "maxlength" - String containing
     *          maxlength of the Attribute 7) "dimension" - name of the dimension 8) "range" - StringList of range Values Note: no key-Value pair exists in this map if there is no value for that key
     */
    protected MapList getClassClassificationAttributes(Context context, String objectId) throws Exception {
        DomainObject classObj = new DomainObject(objectId);
        StringList selectables = new StringList();
        String attribute_mxsysInterface = "attribute[" + LibraryCentralConstants.ATTRIBUTE_MXSYS_INTERFACE + "].value";
        selectables.add(attribute_mxsysInterface);
        Map classInfo = classObj.getInfo(context, selectables);
        String mxsysInterface = (String) classInfo.get(attribute_mxsysInterface);
        if (UIUtil.isNullOrEmpty(mxsysInterface)) {
            // if mxsysInterface is empty then there will be no classification attributes associated with this object
            return new MapList();
        }

        StringList slAttributeGroups = new StringList();

        // get all the AttributeGroups of this class using mxsysInterface
        String mqlQuery = "print interface $1 select $2";
        String sAllParentInterfaces = MqlUtil.mqlCommand(context, mqlQuery, mxsysInterface, "allparents.derived");
        // iterate the values and check for Classification Attribute Groups
        // and then form Attribute groups

        HashMap hmAllParentInterfaces = parseMqlOutput(context, sAllParentInterfaces);
        // ALM-2719 - 29-11-2018 mkakade -START
        /*
         * // Added for TIGTK-12984 : START // TreeMap to store values of HashMap TreeMap sorted = new TreeMap();
         * 
         * // Copy all data from hashMap into TreeMap sorted.putAll(hmAllParentInterfaces); Set setAllParentInterfaces = sorted.keySet(); // Added for TIGTK-12984 : END
         */
        // sml4 start group attributes order BUG
        Map sortmap = new TreeMap(hmAllParentInterfaces);
        Set setAllParentInterfaces = sortmap.keySet();
        // sml4 group attributes order BUG end
        // ALM-2719 - 29-11-2018 mkakade -END
        Iterator itr = setAllParentInterfaces.iterator();
        while (itr.hasNext()) {
            String parentInterfaceName = (String) itr.next();
            HashMap tempParentInterface = (HashMap) hmAllParentInterfaces.get(parentInterfaceName);
            if (tempParentInterface != null) {
                String parentInterfaceDerived = (String) tempParentInterface.get("derived");
                if (!UIUtil.isNullOrEmpty(parentInterfaceDerived) && parentInterfaceDerived.equals("Classification Attribute Groups")) {
                    slAttributeGroups.add(parentInterfaceName);
                }
            }
        }

        MapList attributeGroups = new MapList();
        selectables = new StringList();
        selectables.add("type");
        selectables.add("range");
        selectables.add("multiline");
        selectables.add("valuetype");
        selectables.add("default");
        selectables.add("description");
        selectables.add("maxlength");
        selectables.add("dimension");

        // for each attribute group
        for (int i = 0; i < slAttributeGroups.size(); i++) {
            HashMap attibuteGroup = new HashMap();
            String attibuteGroupName = (String) slAttributeGroups.get(i);
            attibuteGroup.put("name", attibuteGroupName);
            MapList attributes = getAttributeGroupAttributesDetails(context, attibuteGroupName, selectables);

            // ALM-2719 - 29-11-2018 mkakade -START
            // sml4 start attributes order BUG
            Collections.sort(attributes, new Comparator<Map>() {
                public int compare(final Map o1, final Map o2) {
                    String name1 = (String) o1.get("name");
                    String name2 = (String) o2.get("name");
                    String label1 = null, label2 = null;
                    // Check whether that attribute label is added in the hashmap cache. if not add it.
                    try {
                        if (tempMap_Cache.get(name1) == null) {
                            label1 = (String) i18nNow.getAttributeI18NString(name1, strLanguageStr);
                            tempMap_Cache.put(name1, label1);
                        } else
                            label1 = (String) tempMap_Cache.get(name1);
                    } catch (Exception ignored) {
                        System.out.println("label1 = null");
                    }
                    try {
                        if (tempMap_Cache.get(name2) == null) {
                            label2 = (String) i18nNow.getAttributeI18NString(name2, strLanguageStr);
                            tempMap_Cache.put(name2, label2);
                        } else
                            label2 = (String) tempMap_Cache.get(name2);
                    } catch (Exception ignored) {
                        System.out.println("label2 = null");
                    }
                    if (label1 == null || label2 == null)
                        return name1.toLowerCase().compareTo(name2.toLowerCase());
                    return label1.toLowerCase().compareTo(label2.toLowerCase());
                }
            });
            // sml4 end attributes order BUG
            // ALM-2719 - 29-11-2018 mkakade -END

            attibuteGroup.put("attributes", attributes);
            attributeGroups.add(attibuteGroup);
        }
        return attributeGroups;
    }

    /**
     * Method to get the Details of all attributes in a Attribute Group
     * @param context
     *            the eMatrix <code>Context</code> object
     * @param agName
     *            - Attribute Group Name
     * @param selectables
     *            - StringList attribute selectables
     * @return MapList containing Maps of attribute Details, Each Map Contains key - attribute's selectable, ex:type , value - String or StringList Based on the Number of available values for the
     *         specified attribute's selectable value will be MapList for the key "range" each map containing an operator and a value keys "name" and "qualifiedName" are included by default even
     *         though they are not in selectables
     */
    protected static MapList getAttributeGroupAttributesDetails(Context context, String agName, StringList selectables) throws Exception {
        StringBuffer cmd = new StringBuffer("print interface \"$1\" select "); // Move select

        selectables.add("owner");

        String[] newArgs = new String[selectables.size() + 1];
        newArgs[0] = agName;
        for (int i = 0; i < selectables.size(); i++) {
            cmd.append("\"$" + (i + 2) + "\" ");
            newArgs[i + 1] = "attribute." + (String) selectables.get(i);
        }

        String result = MqlUtil.mqlCommand(context, cmd.toString(), true, newArgs);

        HashMap hmAllAttributeDetails = parseMqlOutput(context, result);
        MapList agAttributesDetails = new MapList();

        Set setAllAttributeDetails = hmAllAttributeDetails.entrySet();
        Iterator itr = setAllAttributeDetails.iterator();
        while (itr.hasNext()) {
            Map.Entry inputEntry = (Map.Entry) itr.next();
            String attributeName = (String) inputEntry.getKey();
            HashMap hmAttributeDetails = (HashMap) hmAllAttributeDetails.get(attributeName);
            if (hmAttributeDetails != null) {
                String owner = (String) hmAttributeDetails.get("owner");
                String qualifiedName = attributeName;
                if (UIUtil.isNotNullAndNotEmpty(owner)) {
                    qualifiedName = owner + "." + attributeName;
                }
                hmAttributeDetails.put("qualifiedName", qualifiedName);
                hmAttributeDetails.put("name", attributeName);

                // convert range StringList to MapList
                StringList range = (StringList) hmAttributeDetails.get("range");
                if (range != null) {
                    MapList mlRange = new MapList();
                    Iterator<String> rangeItr = range.iterator();
                    while (rangeItr.hasNext()) {
                        String rangeItem = rangeItr.next();
                        int rangeValueIndex = rangeItem.indexOf(" ");
                        if (rangeValueIndex == -1) {
                            rangeItem = rangeItem + " ";
                            rangeValueIndex = rangeItem.indexOf(" ");
                        }
                        String rangeOperator = rangeItem.substring(0, rangeValueIndex);
                        if (rangeOperator.equals("uses")) {
                            rangeOperator = "program";
                            rangeValueIndex = rangeItem.indexOf(" ", rangeValueIndex + 1);
                        }

                        String rangeValue = rangeItem.substring(rangeValueIndex + 1);

                        HashMap hmRangeItem = new HashMap();
                        hmRangeItem.put("operator", rangeOperator);
                        hmRangeItem.put("value", rangeValue);

                        mlRange.add(hmRangeItem);
                    }
                    hmAttributeDetails.put("range", mlRange);
                }
                agAttributesDetails.add(hmAttributeDetails);
            }
        }

        return agAttributesDetails;
    }

    /**
     * this method parse the mql Output of mutiple lines, each line is of the form property[propertyName].subProperty = result where property - should be present - should not contain characters [ ] .
     * = - property in all the lines should be same propertyName - should be present - may contain . or = characters - should not contain characters [ ] subProperty - should be present - should not
     * contain . or = characters - can end with [i] ,where i is 0, 1, 2, 3 ... result - may or may not present
     * @param context
     *            the eMatrix <code>Context</code> object
     * @param output
     *            mql output to be parsed
     * @return a HashMap with following key value pair key - propertyName value - HashMap with following key value pair key - subProperty value - String result
     * @throws Exception
     */
    protected static HashMap parseMqlOutput(Context context, String output) throws Exception {
        BufferedReader in = new BufferedReader(new StringReader(output));
        String PROPNAME_START_DELIMITER = "[";
        String RESULT_DELIMITER = " =";
        String PROPNAME_END_DELIMITER = "]";
        String RANGE_START_DELIMITER = "[";
        String resultLine;
        HashMap mqlResult = new HashMap();
        while ((resultLine = in.readLine()) != null) {
            String property = null;
            String propertyName = null;
            String subProperty = null;
            String result = null;

            try {
                // identify property propertyValue subProperty subPropertyValue - start
                boolean hasRanges = false;
                int propNameStartDelimIndex = resultLine.indexOf(PROPNAME_START_DELIMITER);
                int resultDelimIndex = resultLine.indexOf(RESULT_DELIMITER);

                property = resultLine.substring(0, propNameStartDelimIndex);

                int propNameEndDelimIndex = resultLine.indexOf(PROPNAME_END_DELIMITER, propNameStartDelimIndex);
                propertyName = resultLine.substring(propNameStartDelimIndex + 1, propNameEndDelimIndex);

                String propertyAndValue = property + PROPNAME_START_DELIMITER + propertyName + PROPNAME_END_DELIMITER;
                String remainingResultLine = resultLine.substring(propertyAndValue.length());

                // if remaining result starts with .
                int rangeStartDelimIndex = remainingResultLine.indexOf(RANGE_START_DELIMITER);
                resultDelimIndex = remainingResultLine.indexOf(RESULT_DELIMITER);
                if ((rangeStartDelimIndex != -1) && (rangeStartDelimIndex < resultDelimIndex)) {
                    // if [ exists and comes before = , then anything before [ is the subProperty and subProperty contains range of results
                    subProperty = remainingResultLine.substring(1, rangeStartDelimIndex);
                    hasRanges = true;
                } else {
                    // else , anything Before = is the subProperty
                    subProperty = remainingResultLine.substring(1, resultDelimIndex);
                }

                result = remainingResultLine.substring(resultDelimIndex + RESULT_DELIMITER.length());

                property = property.trim();
                result = result.trim();

                // identify property propertyValue subProperty subPropertyValue - end

                // start building HashMap
                HashMap hmPropertyName;
                StringList slSubProperty;

                hmPropertyName = (HashMap) mqlResult.get(propertyName);
                if (hmPropertyName == null) {
                    hmPropertyName = new HashMap();
                    mqlResult.put(propertyName, hmPropertyName);
                }
                if (hasRanges) {
                    slSubProperty = (StringList) hmPropertyName.get(subProperty);
                    if (slSubProperty == null) {
                        slSubProperty = new StringList();
                        hmPropertyName.put(subProperty, slSubProperty);
                    }
                    slSubProperty.add(result);
                } else {
                    hmPropertyName.put(subProperty, result);
                }

            } catch (Exception e) {
                // if there is exception during parsing a line , proceed to next line
            }
        }

        return mqlResult;
    }

    /***
     * This method create the settingsMap and fieldMap to display all the Classification Attributes. The list of Attributes are looped through and check is performed whether the attributes is of type
     * Integer/String/Real/Date/Boolean, the fieldMap is set with the appropriate settings for each of the attribute type.
     * @param context
     * @param classificationAttributesList
     * @param formMode
     * @param sLanguage
     * @since R215
     * @return MapList containing the settingMap
     * @throws Exception
     */
    private MapList getDynamicFieldsMapList(Context context, MapList classificationAttributesList, String formName, String strCurrent, boolean isCreate, String strMode, String strObjectId)
            throws Exception {

        MapList fieldMapList = new MapList();
        // Define a new MapList to return.
        String strLanguage = context.getSession().getLanguage();
        String SETTING_REMOVE_RANGE_BLANK = "Remove Range Blank";
        // attributeAttributeGroupMap contains all the attribute group names to which each attribute belongs
        HashMap attributeAttributeGroupMap = new HashMap();

        if (classificationAttributesList == null)
            return fieldMapList;

        Iterator classItr = classificationAttributesList.iterator();
        while (classItr.hasNext()) {

            Map classificationAttributesMap = (Map) classItr.next();

            MapList classificationAttributes = (MapList) classificationAttributesMap.get("attributes");
            String className = (String) classificationAttributesMap.get("className");
            if (classificationAttributes.size() > 0) {
                HashMap settingsMapForClassHeader = new HashMap();
                HashMap fieldMapForClassHeader = new HashMap();
                settingsMapForClassHeader.put(LibraryCentralConstants.SETTING_FIELD_TYPE, "Section Header");
                settingsMapForClassHeader.put(LibraryCentralConstants.SETTING_REGISTERED_SUITE, "LibraryCentral");
                settingsMapForClassHeader.put("Section Level", "1");
                fieldMapForClassHeader.put(LibraryCentralConstants.LABEL, className);
                fieldMapForClassHeader.put("settings", settingsMapForClassHeader);
                fieldMapList.add(fieldMapForClassHeader);
            }
            for (int i = 0; i < classificationAttributes.size(); i++) {
                HashMap attributeGroup = (HashMap) classificationAttributes.get(i);
                String attributeGroupName = (String) attributeGroup.get("name");
                MapList attributes = (MapList) attributeGroup.get("attributes");
                HashMap settingsMapForHeader = new HashMap();
                HashMap fieldMapForHeader = new HashMap();
                settingsMapForHeader.put(LibraryCentralConstants.SETTING_FIELD_TYPE, "Section Header");
                settingsMapForHeader.put(LibraryCentralConstants.SETTING_REGISTERED_SUITE, "LibraryCentral");
                settingsMapForHeader.put("Section Level", "2");
                fieldMapForHeader.put(LibraryCentralConstants.LABEL, attributeGroupName);
                fieldMapForHeader.put("settings", settingsMapForHeader);
                fieldMapList.add(fieldMapForHeader);
                for (int j = 0; j < attributes.size(); j++) {
                    HashMap attribute = (HashMap) attributes.get(j);
                    String attributeQualifiedName = (String) attribute.get("qualifiedName");
                    String attributeName = (String) attribute.get("name");

                    HashMap fieldMap = new HashMap();
                    HashMap settingsMap = new HashMap();
                    fieldMap.put(LibraryCentralConstants.NAME, attributeGroupName + "|" + attributeQualifiedName);
                    fieldMap.put(LibraryCentralConstants.LABEL, i18nNow.getAttributeI18NString(attributeName, strLanguage));
                    fieldMap.put(LibraryCentralConstants.EXPRESSION_BUSINESSOBJECT, "attribute[" + attributeQualifiedName + "].value");
                    String attributeType = (String) attribute.get("type");
                    if (attributeType.equals(LibraryCentralConstants.FORMAT_TIMESTAMP)) {
                        settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_DATE);
                        settingsMap.put(LibraryCentralConstants.SETTING_CLEAR, "true");
                    } else if (attributeType.equals(LibraryCentralConstants.FORMAT_BOOLEAN)) {
                        settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                        settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                        MapList range = (MapList) attribute.get("range");

                        if (range == null) {
                            settingsMap.put(LibraryCentralConstants.SETTING_RANGE_PROGRAM, "emxLibraryCentralClassificationAttributes");
                            settingsMap.put(LibraryCentralConstants.SETTING_RANGE_FUNCTION, "getRangeValuesForBooleanAttributes");

                        }
                    } else if (attributeType.equals(LibraryCentralConstants.FORMAT_INTEGER)) {
                        settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_INTEGER);
                        if (UOMUtil.isAssociatedWithDimension(context, attributeQualifiedName)) {
                            addUOMDetailsToSettingsMap(context, attributeQualifiedName, fieldMap, settingsMap);
                        }
                        if (formName.equals("type_CreatePart"))
                            settingsMap.put(LibraryCentralConstants.SETTING_VALIDATE, "isValidInteger");
                        // setting the input type to combobox
                        if ((MapList) attribute.get("range") != null) {
                            settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                            settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                        }
                    } else if (attributeType.equals(LibraryCentralConstants.FORMAT_REAL)) {
                        settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_NUMERIC);
                        if (UOMUtil.isAssociatedWithDimension(context, attributeQualifiedName)) {
                            addUOMDetailsToSettingsMap(context, attributeQualifiedName, fieldMap, settingsMap);
                        }
                        if (formName.equals("type_CreatePart"))
                            settingsMap.put(LibraryCentralConstants.SETTING_VALIDATE, "checkPositiveReal");
                        // setting the input type to combobox
                        if ((MapList) attribute.get("range") != null) {
                            settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                            settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                        }
                    } else if (attributeType.equals(LibraryCentralConstants.FORMAT_STRING)) {
                        MapList range = (MapList) attribute.get("range");
                        String isMultiline = (String) attribute.get("multiline");
                        if (range != null && range.size() > 0) {
                            settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                            settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_STRING);
                            settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                            settingsMap.put(LibraryCentralConstants.SETTING_REGISTERED_SUITE, "Framework");
                            String adminName = UICache.getSymbolicName(context, attributeName, "attribute");
                            settingsMap.put("Admin Type", adminName);
                        } else if (LibraryCentralConstants.BOOLEAN_TRUE.equalsIgnoreCase(isMultiline)) {
                            settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_TEXTAREA);
                        } else {
                            settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_TEXTBOX);
                        }
                    } else {

                    }

                    settingsMap.put(LibraryCentralConstants.SETTING_FIELD_TYPE, LibraryCentralConstants.FIELD_TYPE_ATTRIBUTE);
                    if (isCreate) {
                        settingsMap.put(LibraryCentralConstants.SETTING_UPDATE_PROGRAM, "emxLibraryCentralCommon");
                        settingsMap.put(LibraryCentralConstants.SETTING_UPDATE_FUNCTION, "dummyUpdateFunction");
                    }
                    if (attributeName.equals(TigerConstants.ATTRIBUTE_PSS_TRADE_NAME) || attributeName.equals(TigerConstants.ATTRIBUTE_PSS_SUPPLIER)
                            || attributeName.equals(TigerConstants.ATTRIBUTE_PSS_FAURECIASHORTLENGHTDESCRIPTION)) {
                        settingsMap.put("Access Function", "isVisibleAttribute");
                        settingsMap.put("Access Program", "pss.cadbom.Material");
                    }
                    if (attributeQualifiedName.equalsIgnoreCase(TigerConstants.ATTRIBUTE_PSS_TRADE_NAME) || attributeQualifiedName.equalsIgnoreCase(TigerConstants.ATTRIBUTE_PSS_SUPPLIER)) {
                        if (attributeName.equalsIgnoreCase(TigerConstants.ATTRIBUTE_PSS_FAURECIASHORTLENGHTDESCRIPTION)) {
                            settingsMap.put("Editable", "false");

                        }
                    }
                    if (attributeQualifiedName.equalsIgnoreCase(TigerConstants.ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL)
                            || attributeQualifiedName.equalsIgnoreCase(TigerConstants.ATTRIBUTE_PSS_CROSSLINKING)) {
                        String strChildClassification = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentral.Attributes.TechnologyChildList");
                        DomainObject domObj = DomainObject.newInstance(context, strObjectId);
                        StringList slTChildIds = domObj.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PROCESS_INSTANCE_CONTINUOUS + "].to.id");
                        for (int k = 0; k < slTChildIds.size(); k++) {
                            String strChildIs = (String) slTChildIds.get(k);
                            DomainObject domObjectChild = DomainObject.newInstance(context, strChildIs);
                            String strGeneralClass = domObjectChild.getInfo(context, "to[" + TigerConstants.RELATIONSHIP_CLASSIFIEDITEM + "].from.name");
                            StringList slChildList = FrameworkUtil.split(strChildClassification, ",");
                            if (slChildList.contains(strGeneralClass)) {
                                settingsMap.put("Editable", "false");
                            }

                        }

                    }

                    fieldMap.put("settings", settingsMap);
                    fieldMapList.add(fieldMap);
                    String attributeGroupNames = (String) attributeAttributeGroupMap.get(attributeQualifiedName);
                    if (attributeGroupNames == null) {
                        attributeAttributeGroupMap.put(attributeQualifiedName, attributeGroupName);
                    } else {
                        attributeAttributeGroupMap.put(attributeQualifiedName, attributeGroupNames + "|" + attributeGroupName);
                    }
                }
            }

        }
        StringList slAttributeList = new StringList();
        slAttributeList.add("PSS_LaserEtching");
        slAttributeList.add("PSS_Polishable");
        slAttributeList.add("PSS_Soft");
        slAttributeList.add("PSS_PlatableForMaterial");
        slAttributeList.add("PSS_RecyclateForMaterial");
        slAttributeList.add("PSS_UVResistanceForMaterial");
        slAttributeList.add("PSS_ScratchResistanceMaterial");
        slAttributeList.add("PSS_FillerNatureMaterial");
        slAttributeList.add("PSS_FillerContentMaterial");
        slAttributeList.add("PSS_Impact_Resistance");
        slAttributeList.add("PSS_MasterbatchMatrixNature");

        Iterator itr = fieldMapList.iterator();
        while (itr.hasNext()) {
            HashMap fieldMap = (HashMap) itr.next();
            HashMap settingsMap = (HashMap) fieldMap.get("settings");
            if (!"Section Header".equals(settingsMap.get("Field Type"))) {
                String fieldName = (String) fieldMap.get("name");
                String attributeName = fieldName.substring(fieldName.indexOf('|') + 1);

                String allAttributeGroupsNames = (String) attributeAttributeGroupMap.get(attributeName);
                settingsMap.put("AttributeGroups", allAttributeGroupsNames);
                if (slAttributeList.contains(attributeName) && "edit".equals(strMode)) {
                    settingsMap.remove("Admin Type");
                }
            }
        }
        HashMap reloadFunctionField = new HashMap();
        HashMap reloadFunctionFieldSettings = new HashMap();
        reloadFunctionFieldSettings.put(LibraryCentralConstants.SETTING_FIELD_TYPE, "programHTMLOutput");
        reloadFunctionFieldSettings.put("program", "emxLibraryCentralClassificationAttributes");
        reloadFunctionFieldSettings.put("function", "getReloadDuplicateAttributesInForm");

        reloadFunctionField.put("name", "reloadFunctionField");
        reloadFunctionField.put("settings", reloadFunctionFieldSettings);

        fieldMapList.add(reloadFunctionField);
        return fieldMapList;
    }

    /***
     * This method adds all the UOM details required to display Classification Attribute during create Generic Document/Part. To display UOM details settingsMap should contain Field Type=Attribute,
     * otherwise the UI would display only textbox next to the UOM Field.Once the map contains FieldType=Attribute, BPS code assumes that this Attribute is defined on the Type, but in case of
     * Classification Attributes it's not, Hence to overcome this bug a Dummy update program & function is used here, If a update program & Function is defined BPS wouldn't check whether the attribute
     * is defined on the type.
     * @param context
     * @param attributeName
     * @param fieldMap
     * @param settingsMap
     * @since R215
     * @throws FrameworkException
     */
    private void addUOMDetailsToSettingsMap(Context context, String attributeName, HashMap fieldMap, HashMap settingsMap) throws FrameworkException {
        String UOM_UNIT_LIST = "DB UnitList";
        String DB_UNIT = "DB Unit";
        String UOM_ASSOCIATEDWITHUOM = "AssociatedWithUOM";
        fieldMap.put(UOM_ASSOCIATEDWITHUOM, LibraryCentralConstants.BOOLEAN_TRUE);
        fieldMap.put(DB_UNIT, UOMUtil.getSystemunit(context, null, attributeName, null));
        fieldMap.put(UOM_UNIT_LIST, UOMUtil.getDimensionUnits(context, attributeName));
        settingsMap.put(LibraryCentralConstants.SETTING_EDITABLE_FIELD, LibraryCentralConstants.BOOLEAN_TRUE);
        settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_TEXTBOX);
    }

    /***
     * This method is used to display all the Classification Attributes during create Generic Document or Part. If the Class/PF contains Attribute Group all the attributes belonging each Attribute
     * Group is retrieved using getClassClassificationAttributes method. Once the list is obtained settinsMap and filedMap is constructed using getDynamicFieldsDuringCreate Function Function_033728
     * @param context
     * @param args
     * @return MapList
     * @throws Exception
     */
    public MapList getAttributeforEdit(Context context, String[] args) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap requestMap = (HashMap) programMap.get("requestMap");
        String endItemObjectId = (String) requestMap.get("objectId");
        String formName = (String) requestMap.get("form");
        MapList fieldMapList = new MapList();
        MapList classificationAttributesList = new MapList();
        DomainObject endItemObj = new DomainObject(endItemObjectId);
        StringList objectSelects = new StringList();
        objectSelects.add(DomainConstants.SELECT_ID);
        objectSelects.add(DomainConstants.SELECT_NAME);
        MapList classificationList = endItemObj.getRelatedObjects(context, "Classified Item", "*", objectSelects, null, true, // boolean getTo,
                false, // boolean getFrom,
                (short) 0, null, null, 0);
        int noOfClasses = classificationList.size();

        if (noOfClasses > 0) {
            Iterator itr = classificationList.iterator();
            while (itr.hasNext()) {
                Map classMap = (Map) itr.next();

                MapList classificationAttributes = getClassClassificationAttributes(context, (String) classMap.get(DomainConstants.SELECT_ID));
                if (classificationAttributes.size() > 0) {
                    HashMap classificationAttributesMap = new HashMap();
                    classificationAttributesMap.put("className", classMap.get(DomainConstants.SELECT_NAME));
                    classificationAttributesMap.put("attributes", classificationAttributes);

                    classificationAttributesList.add(classificationAttributesMap);
                }
            }

            fieldMapList = getDynamicFieldsForEditMapList(context, classificationAttributesList, formName, false);
        }

        return fieldMapList;
    }

    /***
     * This method create the settingsMap and fieldMap to display all the Classification Attributes. The list of Attributes are looped through and check is performed whether the attributes is of type
     * Integer/String/Real/Date/Boolean, the fieldMap is set with the appropriate settings for each of the attribute type.
     * @param context
     * @param classificationAttributesList
     * @param formMode
     * @param sLanguage
     * @since R215
     * @return MapList containing the settingMap
     * @throws Exception
     */
    private MapList getDynamicFieldsForEditMapList(Context context, MapList classificationAttributesList, String formName, boolean isCreate) throws Exception {

        MapList fieldMapList = new MapList();
        String strLanguage = context.getSession().getLanguage();
        HashMap attributeAttributeGroupMap = new HashMap();
        String SETTING_REMOVE_RANGE_BLANK = "Remove Range Blank";
        if (classificationAttributesList == null)
            return fieldMapList;
        Iterator classItr = classificationAttributesList.iterator();
        while (classItr.hasNext()) {
            Map classificationAttributesMap = (Map) classItr.next();
            MapList classificationAttributes = (MapList) classificationAttributesMap.get("attributes");
            String className = (String) classificationAttributesMap.get("className");
            if (classificationAttributes.size() > 0) {
                HashMap settingsMapForClassHeader = new HashMap();
                HashMap fieldMapForClassHeader = new HashMap();
                settingsMapForClassHeader.put(LibraryCentralConstants.SETTING_FIELD_TYPE, "Section Header");
                settingsMapForClassHeader.put(LibraryCentralConstants.SETTING_REGISTERED_SUITE, "LibraryCentral");
                settingsMapForClassHeader.put("Section Level", "1");
                fieldMapForClassHeader.put(LibraryCentralConstants.LABEL, className);
                fieldMapForClassHeader.put("settings", settingsMapForClassHeader);
                fieldMapList.add(fieldMapForClassHeader);
            }
            for (int i = 0; i < classificationAttributes.size(); i++) {
                HashMap attributeGroup = (HashMap) classificationAttributes.get(i);
                String attributeGroupName = (String) attributeGroup.get("name");
                MapList attributes = (MapList) attributeGroup.get("attributes");
                HashMap settingsMapForHeader = new HashMap();
                HashMap fieldMapForHeader = new HashMap();
                settingsMapForHeader.put(LibraryCentralConstants.SETTING_FIELD_TYPE, "Section Header");
                settingsMapForHeader.put(LibraryCentralConstants.SETTING_REGISTERED_SUITE, "LibraryCentral");
                settingsMapForHeader.put("Section Level", "2");
                fieldMapForHeader.put(LibraryCentralConstants.LABEL, attributeGroupName);
                fieldMapForHeader.put("settings", settingsMapForHeader);
                fieldMapList.add(fieldMapForHeader);
                String strautoDescriptionAttributes = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentralStringResource", context.getLocale(),
                        "emxEngineeringCentral.PSS_MaterialEdit.AttributeList");
                if (UIUtil.isNotNullAndNotEmpty(strautoDescriptionAttributes)) {

                    StringList lstautoDesAttributesList = FrameworkUtil.split(strautoDescriptionAttributes, ",");
                    int intAttributeListSize = lstautoDesAttributesList.size();
                    for (int intIndex = 0; intIndex < intAttributeListSize; intIndex++) {

                        String strattributes = (String) lstautoDesAttributesList.get(intIndex);

                        String strattribOrgName = PropertyUtil.getSchemaProperty(context, strattributes);
                        // if (attributes.contains(strattributes)) {
                        for (int j = 0; j < attributes.size(); j++) {
                            HashMap attribute = (HashMap) attributes.get(j);
                            String attributeQualifiedName = (String) attribute.get("qualifiedName");
                            String attributeName = (String) attribute.get("name");
                            if (attributeName.equalsIgnoreCase(strattribOrgName)) {

                                HashMap fieldMap = new HashMap();
                                HashMap settingsMap = new HashMap();

                                fieldMap.put(LibraryCentralConstants.NAME, attributeGroupName + "|" + attributeQualifiedName);
                                fieldMap.put(LibraryCentralConstants.LABEL, i18nNow.getAttributeI18NString(attributeName, strLanguage));
                                fieldMap.put(LibraryCentralConstants.EXPRESSION_BUSINESSOBJECT, "attribute[" + attributeQualifiedName + "].value");
                                String attributeType = (String) attribute.get("type");

                                if (attributeType.equals(LibraryCentralConstants.FORMAT_TIMESTAMP)) {
                                    settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_DATE);
                                    settingsMap.put(LibraryCentralConstants.SETTING_CLEAR, "true");
                                } else if (attributeType.equals(LibraryCentralConstants.FORMAT_BOOLEAN)) {
                                    settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                                    settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                                    MapList range = (MapList) attribute.get("range");
                                    if (range == null) {
                                        settingsMap.put(LibraryCentralConstants.SETTING_RANGE_PROGRAM, "emxLibraryCentralClassificationAttributes");
                                        settingsMap.put(LibraryCentralConstants.SETTING_RANGE_FUNCTION, "getRangeValuesForBooleanAttributes");
                                    }
                                } else if (attributeType.equals(LibraryCentralConstants.FORMAT_INTEGER)) {
                                    settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_INTEGER);
                                    if (UOMUtil.isAssociatedWithDimension(context, attributeQualifiedName)) {
                                        addUOMDetailsToSettingsMap(context, attributeQualifiedName, fieldMap, settingsMap);
                                    }
                                    if ((MapList) attribute.get("range") != null) {
                                        settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                                        settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                                    }
                                } else if (attributeType.equals(LibraryCentralConstants.FORMAT_REAL)) {
                                    settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_NUMERIC);
                                    if (UOMUtil.isAssociatedWithDimension(context, attributeQualifiedName)) {
                                        addUOMDetailsToSettingsMap(context, attributeQualifiedName, fieldMap, settingsMap);
                                    }
                                    if ((MapList) attribute.get("range") != null) {
                                        settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                                        settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                                    }
                                } else if (attributeType.equals(LibraryCentralConstants.FORMAT_STRING)) {
                                    MapList range = (MapList) attribute.get("range");
                                    String isMultiline = (String) attribute.get("multiline");
                                    if (range != null && range.size() > 0) {
                                        settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_COMBOBOX);
                                        settingsMap.put(LibraryCentralConstants.SETTING_FORMAT, LibraryCentralConstants.FORMAT_STRING);
                                        settingsMap.put(SETTING_REMOVE_RANGE_BLANK, "true");
                                        settingsMap.put(LibraryCentralConstants.SETTING_REGISTERED_SUITE, "Framework");

                                    } else if (LibraryCentralConstants.BOOLEAN_TRUE.equalsIgnoreCase(isMultiline)) {
                                        settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_TEXTAREA);
                                    } else {
                                        settingsMap.put(LibraryCentralConstants.SETTING_INPUT_TYPE, LibraryCentralConstants.INPUT_TYPE_TEXTBOX);
                                    }
                                } else {
                                }

                                if (isCreate) {
                                    settingsMap.put(LibraryCentralConstants.SETTING_UPDATE_PROGRAM, "emxLibraryCentralCommon");
                                    settingsMap.put(LibraryCentralConstants.SETTING_UPDATE_FUNCTION, "dummyUpdateFunction");
                                }

                                if (attributeName.equals(TigerConstants.ATTRIBUTE_PSS_TRADE_NAME) || attributeName.equals(TigerConstants.ATTRIBUTE_PSS_SUPPLIER)
                                        || attributeName.equals(TigerConstants.ATTRIBUTE_PSS_FAURECIASHORTLENGHTDESCRIPTION)) {
                                    settingsMap.put("Access Function", "isVisibleAttribute");
                                    settingsMap.put("Access Program", "pss.cadbom.Material");
                                }
                                if (attributeQualifiedName.equalsIgnoreCase(TigerConstants.ATTRIBUTE_PSS_TRADE_NAME)
                                        && attributeQualifiedName.equalsIgnoreCase(TigerConstants.ATTRIBUTE_PSS_SUPPLIER)) {
                                    if (attributeName.equalsIgnoreCase("PSS_FaureciaShortLenghtDescription")) {
                                        settingsMap.put("Editable", "false");

                                    }
                                }

                                fieldMap.put("settings", settingsMap);
                                fieldMapList.add(fieldMap);
                                String attributeGroupNames = (String) attributeAttributeGroupMap.get(attributeQualifiedName);
                                if (attributeGroupNames == null) {
                                    attributeAttributeGroupMap.put(attributeQualifiedName, attributeGroupName);
                                } else {
                                    attributeAttributeGroupMap.put(attributeQualifiedName, attributeGroupNames + "|" + attributeGroupName);
                                }

                            }
                        }
                    }
                }
            }
        }
        Iterator itr = fieldMapList.iterator();
        while (itr.hasNext()) {
            HashMap fieldMap = (HashMap) itr.next();
            HashMap settingsMap = (HashMap) fieldMap.get("settings");
            if (!"Section Header".equals(settingsMap.get("Field Type"))) {
                String fieldName = (String) fieldMap.get("name");
                String attributeName = fieldName.substring(fieldName.indexOf('|') + 1);

                String allAttributeGroupsNames = (String) attributeAttributeGroupMap.get(attributeName);
                settingsMap.put("AttributeGroups", allAttributeGroupsNames);
            }
        }
        HashMap reloadFunctionField = new HashMap();
        HashMap reloadFunctionFieldSettings = new HashMap();
        reloadFunctionFieldSettings.put(LibraryCentralConstants.SETTING_FIELD_TYPE, "programHTMLOutput");
        reloadFunctionFieldSettings.put("program", "emxLibraryCentralClassificationAttributes");
        reloadFunctionFieldSettings.put("function", "getReloadDuplicateAttributesInForm");

        reloadFunctionField.put("name", "reloadFunctionField");
        reloadFunctionField.put("settings", reloadFunctionFieldSettings);

        fieldMapList.add(reloadFunctionField);

        return fieldMapList;
    }

    /**
     * This method is executed on trigger which auto populate the value of PSS_GTSTechnicalFamilyMaterial
     * @param context
     * @param args
     * @return
     * @throws Exception
     *             if the operation fails
     * @modified for : TIGTK-13791 : 05-09-2018
     */

    public void autoPopulateValue(Context context, String[] args) throws Exception {
        StringBuffer sbValue = new StringBuffer();
        try {
            String strMaterialObjectID = args[0];
            DomainObject domMaterailObject = DomainObject.newInstance(context, strMaterialObjectID);
            Map mapAttribute = domMaterailObject.getAttributeMap(context);
            String strLocale = context.getSession().getLanguage();
            if (mapAttribute.containsKey(TigerConstants.ATTRIBUTE_PSS_GTSTECHNICALFAMILYMATERIAL)) {

                String strThermoplasticChildsGeneralClass = EnoviaResourceBundle.getProperty(context, "PSS_emxEngineeringCentral.AutoDescriptionGeneralClass.ThermoplasticChilds");
                StringList slThermoplasticChildsGeneralClass = FrameworkUtil.split(strThermoplasticChildsGeneralClass, ",");
                String strPaintChildsChildsGeneralClass = EnoviaResourceBundle.getProperty(context, "PSS_emxEngineeringCentral.AutoDescriptionGeneralClass.PaintChilds");
                StringList slPaintChildsChildsGeneralClass = FrameworkUtil.split(strPaintChildsChildsGeneralClass, ",");

                StringList slObjectSelect = new StringList();
                slObjectSelect.add(DomainConstants.SELECT_NAME);
                slObjectSelect.add("to[" + TigerConstants.RELATIONSHIP_CLASSIFIEDITEM + "]." + DomainConstants.SELECT_FROM_NAME);
                slObjectSelect.add("from[" + TigerConstants.RELATIONSHIP_PSS_MATERIALMASTERBATCHCOLOROPTIONS + "]." + DomainConstants.SELECT_TO_NAME);
                // Paint
                /* PSS_ColorName : Color Name from the Color Option linked to the Material, else from the Material Color attribute */
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_COLORNAME);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_CROSSLINKING);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_LASERETCHING);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_GLOSSFORMATERIAL);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_POLISHABLE);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_SOFT);
                // Tharmoplastic
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_FILLERNATUREFORMATERIAL);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_FILLERCONTENTMATERIAL);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_IMPACT_HEAT_RESISTANCE_BALANCE);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_HEAT_RESISTANCE_LEVEL); // Verification required on this
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_IMPACT_RESISTANCE);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_SCRATCHRESISTANCEMATERIAL);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_PLATABLEFORMATERIAL);
                // Other TP
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_TECHNICALDESCRIPTION);
                // Raw Resin : PSS_TechnologyForMaterial,PSS_Crosslinking
                // Raw Hardener : PSS_TechnologyForMaterial
                // Technical Concentrate Masterbatch
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_MASTERBATCHMATRIXNATURE);
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_MINERALFILLERCONTENT);
                // Long Glass Fiber Masterbatch : ATTRIBUTE_PSS_MASTERBATCHMATRIXNATURE
                slObjectSelect.add(TigerConstants.SELECT_ATTRIBUTE_PSS_GLASSFIBRECONTENTFORMATERIAL);

                Map<?, ?> mapObjectInfo = domMaterailObject.getInfo(context, slObjectSelect);

                String strGeneralClass = (String) mapObjectInfo.get("to[" + TigerConstants.RELATIONSHIP_CLASSIFIEDITEM + "]." + DomainConstants.SELECT_FROM_NAME);
                // TEMPORARY FOR ESTING
                String strTechnology = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL);
                String strCrosslinking = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_CROSSLINKING);

                String strOtherGeneralClass = EnoviaResourceBundle.getProperty(context, "PSS_emxEngineeringCentral.AutoDescriptionGeneralClass.Other");
                StringList slOthersGeneralClass = FrameworkUtil.split(strOtherGeneralClass, ",");
                String strOtherTp = (String) slOthersGeneralClass.get(0);
                String strTechnicalConcentrateMasterbatch = (String) slOthersGeneralClass.get(1);
                String strLongGlassFiberMasterbatch = (String) slOthersGeneralClass.get(2);
                String strColorMasterbatch = (String) slOthersGeneralClass.get(3);
                // For these particular GC in value attribute value GC name is not required
                if (!strOtherGeneralClass.contains(strGeneralClass)) {
                    sbValue.append(strGeneralClass);
                    sbValue.append(" ");
                }

                // If General Class is from Paint Child General Class
                if (slPaintChildsChildsGeneralClass.contains(strGeneralClass)) {
                    /* Color Name from the Color Option linked to the Material, else from the Material Color attribute */
                    String strColorName = DomainConstants.EMPTY_STRING;
                    strColorName = (String) mapObjectInfo.get("from[" + TigerConstants.RELATIONSHIP_PSS_MATERIALMASTERBATCHCOLOROPTIONS + "]." + DomainConstants.SELECT_TO_NAME);
                    if (UIUtil.isNullOrEmpty(strColorName)) {
                        strColorName = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_COLORNAME);
                    }

                    String strLaserEtching = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_LASERETCHING);
                    String strGloss = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_GLOSSFORMATERIAL);
                    String strPolishable = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_POLISHABLE);
                    String strSoft = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_SOFT);

                    sbValue.append(strColorName);
                    if (UIUtil.isNotNullAndNotEmpty(strColorName))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL, strTechnology, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strTechnology))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_CROSSLINKING, strCrosslinking, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strCrosslinking))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_LASERETCHING, strLaserEtching, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strLaserEtching))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_GLOSSFORMATERIAL, strGloss, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strGloss))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_POLISHABLE, strPolishable, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strPolishable))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_SOFT, strSoft, strLocale));

                }

                // If General Class is from Tharmoplastic Child General Class
                if (slThermoplasticChildsGeneralClass.contains(strGeneralClass)) {
                    String strFiller_Nature = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_FILLERNATUREFORMATERIAL);
                    String strFillerContentMaterial = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_FILLERCONTENTMATERIAL);
                    String strImpact_Heat_Resistance_Balance = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_IMPACT_HEAT_RESISTANCE_BALANCE);
                    String strHeat_Resistance_Level = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_HEAT_RESISTANCE_LEVEL);
                    String strImpact_Resistance = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_IMPACT_RESISTANCE);
                    String strScratchResistanceMaterial = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_SCRATCHRESISTANCEMATERIAL);
                    String strPlatableForMaterial = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_PLATABLEFORMATERIAL);

                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_FILLERNATUREFORMATERIAL, strFiller_Nature, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strFiller_Nature))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_FILLERCONTENTMATERIAL, strFillerContentMaterial, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strFillerContentMaterial))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_IMPACT_HEAT_RESISTANCE_BALANCE, strImpact_Heat_Resistance_Balance, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strImpact_Heat_Resistance_Balance))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_HEAT_RESISTANCE_LEVEL, strHeat_Resistance_Level, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strHeat_Resistance_Level))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_IMPACT_RESISTANCE, strImpact_Resistance, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strImpact_Resistance))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_SCRATCHRESISTANCEMATERIAL, strScratchResistanceMaterial, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strScratchResistanceMaterial))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_PLATABLEFORMATERIAL, strPlatableForMaterial, strLocale));
                }

                // If General Class is Other TP
                if (strOtherTp.equalsIgnoreCase(strGeneralClass)) {
                    String strTechnicalDescription = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_TECHNICALDESCRIPTION);
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_TECHNICALDESCRIPTION, strTechnicalDescription, strLocale));
                }

                // If General Class is Raw Resin : PSS_TechnologyForMaterial,PSS_Crosslinking
                if ("Raw Resin".equalsIgnoreCase(strGeneralClass)) {
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL, strTechnology, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strTechnology))
                        sbValue.append(" ");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_CROSSLINKING, strCrosslinking, strLocale));
                }
                // If General Class is Raw Hardener : PSS_TechnologyForMaterial
                if ("Raw Hardener".equalsIgnoreCase(strGeneralClass)) {
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL, strTechnology, strLocale));
                }

                // If General Class is Chemical Foaming Agent Masterbatch
                if ("Chemical Foaming Agent Masterbatch".equalsIgnoreCase(strGeneralClass)) {
                    sbValue.append("for Injection Molding");
                }

                // If General Class is Technical Concentrate Masterbatch
                String strMasterbatchMatrixNature = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_MASTERBATCHMATRIXNATURE);
                if (strTechnicalConcentrateMasterbatch.equalsIgnoreCase(strGeneralClass)) {
                    String strMineralFillerContent = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_MINERALFILLERCONTENT);
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_MASTERBATCHMATRIXNATURE, strMasterbatchMatrixNature, strLocale));
                    sbValue.append("-MD");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_MINERALFILLERCONTENT, strMineralFillerContent, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strMineralFillerContent))
                        sbValue.append(" ");
                    sbValue.append(strGeneralClass);
                    sbValue.append(" for dilution");
                }

                // If General Class is Long Glass Fiber Masterbatch
                if (strLongGlassFiberMasterbatch.equalsIgnoreCase(strGeneralClass)) {
                    String strGlassFiberContent = (String) mapObjectInfo.get(TigerConstants.SELECT_ATTRIBUTE_PSS_GLASSFIBRECONTENTFORMATERIAL);
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_MASTERBATCHMATRIXNATURE, strMasterbatchMatrixNature, strLocale));
                    sbValue.append("-LGF");
                    sbValue.append(i18nNow.getRangeI18NString(TigerConstants.ATTRIBUTE_PSS_GLASSFIBRECONTENTFORMATERIAL, strGlassFiberContent, strLocale));
                    if (UIUtil.isNotNullAndNotEmpty(strGlassFiberContent))
                        sbValue.append(" ");
                    sbValue.append("Masterbatch for dilution");
                }

                // If General Class is Color Masterbatch
                if (strColorMasterbatch.equalsIgnoreCase(strGeneralClass)) {
                    String strMaterialName = (String) mapObjectInfo.get(DomainConstants.SELECT_NAME);
                    sbValue.append(strMaterialName);
                }
                // Set value of attribute based on its related General Class attributes
                domMaterailObject.setAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_GTSTECHNICALFAMILYMATERIAL, sbValue.toString());
            }
        } catch (RuntimeException ex) {
            logger.error("Error in autoPopulateValue: ", ex);
        } catch (Exception ex) {
            logger.error("Error in autoPopulateValue: ", ex);
        }
    }

    /**
     * This method is used to visible field on property page.
     * @param context
     * @param args
     * @return
     * @throws Exception
     *             if the operation fails
     */
    public Boolean isVisibleAttribute(Context context, String[] args) throws Exception {
        Boolean isVisible = false;
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String strObjId = (String) programMap.get("objectId");
            DomainObject dObj = DomainObject.newInstance(context, strObjId);
            String strNewMaterialType = dObj.getAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);
            String strNewMakeOrBuy = dObj.getAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_MANUFACTURINGITEMEXTPSS_MAKEORBUY_MATERIAL);
            if (strNewMaterialType.equalsIgnoreCase("Specific")
                    && (strNewMakeOrBuy.equalsIgnoreCase("Buy") || strNewMakeOrBuy.equalsIgnoreCase("Nova") || strNewMakeOrBuy.equalsIgnoreCase("Make and Buy"))) {
                isVisible = true;
            }
        } catch (Exception ex) {
            logger.error("Error in isVisibleAttribute: ", ex);
        }
        return isVisible;
    }

    /**
     * This method is executed if Customer
     * @param context
     *            the eMatrix <code>Context</code> object
     * @param args
     *            holds no arguments
     * @return int value 0 for success
     * @throws Exception
     *             if the operation fails
     */
    public String mxMain(Context context, String[] args) throws Exception {
        String rangeValues = DomainConstants.EMPTY_STRING;
        try {

            StringList slBus = new StringList(1);
            slBus.addElement(DomainObject.SELECT_NAME);
            MapList mlPrograms = DomainObject.findObjects(context, TigerConstants.TYPE_PSS_OEMGROUP, TigerConstants.VAULT_ESERVICEPRODUCTION, "", slBus);
            Iterator itrmlOEMObject = (Iterator) mlPrograms.iterator();
            String sProgramName = DomainConstants.EMPTY_STRING;
            StringList slPrograms = new StringList();
            slPrograms.addElement(TigerConstants.ATTR_VALUE_UNASSIGNED);
            while (itrmlOEMObject.hasNext()) {

                Map mapProgram = (Map) itrmlOEMObject.next();
                sProgramName = (String) mapProgram.get(DomainObject.SELECT_NAME);
                if (sProgramName.contains(" ")) {
                    StringBuffer sbRange = new StringBuffer();
                    sbRange.append("\"");
                    sbRange.append(sProgramName);
                    sbRange.append("\"");
                    sProgramName = sbRange.toString();
                }
                slPrograms.add(sProgramName);
            }

            rangeValues = slPrograms.join(" ");
        } catch (Exception ex) {
            logger.error("Error in mxMain: ", ex);
            throw ex;
        }
        return rangeValues;
    }

    // Added for TIGTK-7116:PKH:Phase-2.0:End

    // Added for TIGTK-7233:Harika Varanasi:Phase-2.0:Starts
    @SuppressWarnings("rawtypes")
    /**
     * getRelatedMaterialObjects
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author Harika Varanasi
     */
    public MapList getRelatedMaterialObjects(Context context, String[] args) throws Exception {
        MapList mlConnectedList = null;
        try {
            Map programMap = (HashMap) JPO.unpackArgs(args);
            String strMaterialObjectId = (String) programMap.get("objectId");
            Pattern typePattern = new Pattern(TigerConstants.TYPE_PSS_PAINTSYSTEM);
            typePattern.addPattern(TigerConstants.TYPE_PSS_PAINTLACK);
            typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIALMIXTURE);
            typePattern.addPattern(TigerConstants.TYPE_PSS_COLORMASTERBATCH);
            typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIAL);

            if (UIUtil.isNotNullAndNotEmpty(strMaterialObjectId)) {
                DomainObject domMaterialObject = DomainObject.newInstance(context, strMaterialObjectId);

                StringList lstSelectStmts = new StringList();
                lstSelectStmts.add(DomainConstants.SELECT_ID);

                StringList lstRelStmts = new StringList();
                lstRelStmts.add(DomainConstants.SELECT_RELATIONSHIP_ID);

                mlConnectedList = domMaterialObject.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS, typePattern.getPattern(), lstSelectStmts, lstRelStmts, true, true,
                        (short) 1, null, null, 0);
            }

        } catch (Exception ex) {
            logger.error("Error in getRelatedMaterialObjects : ", ex);
            throw ex;
        }
        return mlConnectedList;

    }

    /**
     * expandRelatedMaterialObject
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author Harika Varanasi
     */
    public MapList expandRelatedMaterialObject(Context context, String[] args) throws Exception {
        MapList mlConnectedList = null;
        try {
            Map programMap = (HashMap) JPO.unpackArgs(args);

            String strMaterialObjectId = (String) programMap.get("objectId");

            Pattern typePattern = new Pattern(TigerConstants.TYPE_PSS_PAINTSYSTEM);
            typePattern.addPattern(TigerConstants.TYPE_PSS_PAINTLACK);
            typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIALMIXTURE);
            typePattern.addPattern(TigerConstants.TYPE_PSS_COLORMASTERBATCH);
            typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIAL);
            DomainObject domMaterialObject = DomainObject.newInstance(context, strMaterialObjectId);

            StringList lstSelectStmts = new StringList();
            lstSelectStmts.add(DomainConstants.SELECT_ID);

            StringList lstRelStmts = new StringList();
            lstRelStmts.add(DomainConstants.SELECT_RELATIONSHIP_ID);

            mlConnectedList = domMaterialObject.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PROCESS_INSTANCE_CONTINUOUS, typePattern.getPattern(), lstSelectStmts, lstRelStmts, false, true,
                    (short) 0, null, null, 0);
            // TIGTK-7230 : Harika Varanasi : Starts
            Iterator iMaterials = mlConnectedList.iterator();
            while (iMaterials.hasNext()) {
                Map mTempMap = (Map) iMaterials.next();
                mTempMap.put("disableSelection", "True");
            }
            // TIGTK-7230 : Harika Varanasi : Ends

        } catch (Exception ex) {
            logger.error("Error in expandRelatedMaterialObject: ", ex);
            throw ex;
        }

        return mlConnectedList;
    }

    // Added for TIGTK-7233:Harika Varanasi:Phase-2.0:Ends

    // Added for TIGTK-7119:PKH:Phase-2.0:Start
    /**
     * Method is to be called on 2 events 1. Create Action : Set the RPE value 2. Transaction Action : Set Attribute based on RPE value
     * @param context
     * @param args
     * @throws Exception
     */
    public void setInstanceAttributeValue(Context context, String[] args) throws Exception {
        try {
            String fromConnectAction = PropertyUtil.getRPEValue(context, RPE_FROM_CONNECT_MATERIAL, true);
            if (UIUtil.isNotNullAndNotEmpty(fromConnectAction) && "true".equals(fromConnectAction)) {
                String strToObjectId = args[1];
                String strRelId = args[2];
                if (UIUtil.isNotNullAndNotEmpty(strToObjectId) && UIUtil.isNotNullAndNotEmpty(strRelId)) {
                    DomainObject dToObj = DomainObject.newInstance(context, strToObjectId);
                    String strType = dToObj.getInfo(context, DomainConstants.SELECT_TYPE);
                    DomainRelationship domRel = new DomainRelationship(strRelId);
                    // TIGTK-11550:Rutuja Ekatpure:23/11/2017:Start
                    if (domRel.isOpen()) {
                        String result = MqlUtil.mqlCommand(context, "print connection " + strRelId + " select interface dump |", false, false);
                        if (!result.contains("PSS_ManufacturingInstanceExt")) {
                            MqlUtil.mqlCommand(context, "mod connection " + strRelId + " add interface PSS_ManufacturingInstanceExt", false, false);
                        }
                        // TIGTK-11550:Rutuja Ekatpure:23/11/2017:End
                        if (strType.equalsIgnoreCase(TigerConstants.TYPE_PSS_PAINTSYSTEM) || strType.equalsIgnoreCase(TigerConstants.TYPE_PSS_MATERIALMIXTURE)) {
                            domRel.setAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_MANUFACTURINGINSTANCEEXTPSS_PHANTOM, "Level");
                        } else if (strType.equalsIgnoreCase(TigerConstants.TYPE_PSS_PAINTLACK)) {
                            domRel.setAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_MANUFACTURINGINSTANCEEXTPSS_PHANTOM, "Part");
                        }
                    }
                }
                PropertyUtil.setRPEValue(context, RPE_FROM_CONNECT_MATERIAL, "false", true);
            } else {
                PropertyUtil.setRPEValue(context, RPE_FROM_CONNECT_MATERIAL, "true", true);
            }
        } catch (Exception ex) {
            logger.error("Error in setInstanceAttributeValue: ", ex);
            throw ex;
        }
    }

    // Added for TIGTK-7119:PKH:Phase-2.0:End

    // Added for TIGTK-7232:Harika Varanasi:Phase-2.0:Starts
    /**
     * checkChildMaterialsAreInApproved
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author Harika Varanasi
     */
    public int checkChildMaterialsAreInApproved(Context context, String[] args) throws Exception {
        int result = 0;

        try {

            String strMaterialObjId = args[0];
            String strEvaluateExpr = args[1];
            if (UIUtil.isNotNullAndNotEmpty(strMaterialObjId)) {
                DomainObject domMaterialObject = DomainObject.newInstance(context, strMaterialObjId);
                boolean bTypeCheck = false;
                if (UIUtil.isNotNullAndNotEmpty(strEvaluateExpr)) {
                    String strTypeCheck = domMaterialObject.getInfo(context, "evaluate[" + strEvaluateExpr + "]");
                    bTypeCheck = Boolean.parseBoolean(strTypeCheck);
                }
                if (bTypeCheck) {
                    StringList objectSelects = new StringList(1);
                    objectSelects.addElement(DomainConstants.SELECT_NAME);
                    String strRelWhere = "to.current==InWork";
                    MapList mlChildMaterials = domMaterialObject.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PROCESS_INSTANCE_CONTINUOUS, // relationship pattern
                            DomainConstants.QUERY_WILDCARD, // object pattern
                            objectSelects, // object selects
                            null, // relationship selects
                            false, // to direction
                            true, // from direction
                            (short) 0, // recursion level
                            null, // object where clause
                            strRelWhere, 0);
                    if (mlChildMaterials != null && !mlChildMaterials.isEmpty()) {
                        ChangeUtil changeUtil = new ChangeUtil();
                        StringList slChildMaterials = changeUtil.getStringListFromMapList(mlChildMaterials, DomainConstants.SELECT_NAME);
                        String strMessage = MessageUtil.getMessage(context, null, "PSS_FRCMBOMCentral.Alert.PSS_CheckChildMaterialsAreInApproved", new String[] { "childMaterials" },
                                new String[] { FrameworkUtil.join(slChildMaterials, ",") }, null, context.getLocale(), "emxFRCMBOMCentralStringResources");
                        MqlUtil.mqlCommand(context, "notice $1", strMessage);
                        result = 1;
                        return result;
                    }
                }
            }

        } catch (Exception ex) {
            logger.error("Error in CheckChildMaterialsAreInApproved: ", ex);
        }
        return result;
    }

    // Added for TIGTK-7232: Harika Varanasi:Phase-2.0:Ends

    // Added for TIGTK-7230: Harika Varanasi:Phase-2.0:Starts
    /**
     * To include Materials for Generic Material
     * @param context
     * @param args
     * @return StringList
     * @throws Exception
     */
    @SuppressWarnings("rawtypes")
    public StringList includeMaterialsForGenericMaterial(Context context, String[] args) throws Exception {
        StringList slResultedMaterials = new StringList();
        try {
            StringList selectList = new StringList();
            selectList.addElement(DomainConstants.SELECT_ID);
            // TIGTK-17340 : Prakash :18/11/2018 : Start
            selectList.addElement("from[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "].to.attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");
            selectList.addElement("to[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "].from.attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");
            // TIGTK-17340 : Prakash :18/11/2018 : End

            StringBuilder sbTemp = new StringBuilder();
            Pattern typePattern = new Pattern(TigerConstants.TYPE_PSS_PAINTSYSTEM);
            typePattern.addPattern(TigerConstants.TYPE_PSS_PAINTLACK);
            typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIALMIXTURE);
            typePattern.addPattern(TigerConstants.TYPE_PSS_COLORMASTERBATCH);
            typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIAL);

            sbTemp.setLength(0);
            String strWhere = sbTemp.append("(attribute[").append(TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE).append("]==Specific) && !(type==PSS_ColorMasterbatch)")
                    .toString();
            MapList mlMaterials = DomainObject.findObjects(context, typePattern.getPattern(), TigerConstants.VAULT_VPLM, strWhere, selectList);

            // TIGTK-17340 : Prakash :18/11/2018 : Start
            Iterator itr = mlMaterials.iterator();
            while (itr.hasNext()) {
                Map mapMaterial = (HashMap) itr.next();
                String strFromGMaterial = (String) mapMaterial
                        .get("from[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "].to.attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");
                String strToMaterial = (String) mapMaterial
                        .get("to[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "].from.attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");

                if (UIUtil.isNotNullAndNotEmpty(strFromGMaterial) && strFromGMaterial.contains("Generic")) {
                    itr.remove();
                    continue;
                } else if (UIUtil.isNotNullAndNotEmpty(strToMaterial) && strToMaterial.contains("Generic")) {
                    itr.remove();
                    continue;
                }
            }
            // TIGTK-17340 : Prakash :18/11/2018 : End
            ChangeUtil changeUtil = new ChangeUtil();
            slResultedMaterials = changeUtil.getStringListFromMapList(mlMaterials, DomainConstants.SELECT_ID);

        } catch (Exception ex) {
            logger.error("Error in includeMaterialsForGenericMaterial: ", ex);
        }
        if (slResultedMaterials.isEmpty()) {
            slResultedMaterials.addElement(" ");
        }
        return slResultedMaterials;
    }

    /**
     * To include Materials for Specific Material
     * @param context
     * @param args
     * @return StringList
     * @throws Exception
     */
    @SuppressWarnings("rawtypes")
    public StringList includeMaterialsForSpecificMaterial(Context context, String[] args) throws Exception {
        StringList slResultedMaterials = new StringList();
        try {
            HashMap paramMap = (HashMap) JPO.unpackArgs(args);
            String strObjectId = (String) paramMap.get("objectId");

            if (UIUtil.isNotNullAndNotEmpty(strObjectId)) {
                DomainObject domObj = DomainObject.newInstance(context, strObjectId);
                String strType = domObj.getInfo(context, DomainConstants.SELECT_TYPE);

                //TIGTK-17340 : Prakash :18/11/2018 : Start
                String strConnectedGenericMaterial = "False";
                String strConnectedSpecificcMaterial = "False";

                StringList slFromMaterialType = (StringList) domObj.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "].to.attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");
                StringList slToMaterailType = (StringList) domObj.getInfoList(context, "to[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "].from.attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");
                if (slFromMaterialType!=null && !slFromMaterialType.isEmpty()) {
                    if (slFromMaterialType.contains("Generic"))
                        strConnectedGenericMaterial = "True";
                    if (slFromMaterialType.contains("Specific"))
                        strConnectedSpecificcMaterial = "True";
                } else if (slToMaterailType!=null && !slToMaterailType.isEmpty()) {
                    if (slToMaterailType.contains("Generic") && "False".equalsIgnoreCase(strConnectedGenericMaterial))
                        strConnectedGenericMaterial = "True";
                    if (slToMaterailType.contains("Specific") && "False".equalsIgnoreCase(strConnectedSpecificcMaterial))
                        strConnectedSpecificcMaterial = "True";
                }
                
                //TIGTK-17340 : Prakash :18/11/2018 : END
                StringList selectList = new StringList();
                selectList.addElement(DomainConstants.SELECT_ID);
                StringBuilder sbTemp = new StringBuilder();

                Pattern typePattern = new Pattern(TigerConstants.TYPE_PSS_PAINTSYSTEM);
                typePattern.addPattern(TigerConstants.TYPE_PSS_PAINTLACK);
                typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIALMIXTURE);
                typePattern.addPattern(TigerConstants.TYPE_PSS_COLORMASTERBATCH);
                typePattern.addPattern(TigerConstants.TYPE_PSS_MATERIAL);

                sbTemp.setLength(0);
                if (TigerConstants.TYPE_PSS_COLORMASTERBATCH.equalsIgnoreCase(strType)) {
                    if (UIUtil.isNotNullAndNotEmpty(strConnectedGenericMaterial) && "False".equalsIgnoreCase(strConnectedSpecificcMaterial)) {
                        sbTemp.append("(attribute[").append(TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE).append("]==Specific) && !(type==PSS_ColorMasterbatch)").toString();
                    } else {
                        sbTemp.append("FALSE");
                    }

                } else {
                    sbTemp.append("((attribute[").append(TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE).append("]==Specific) && (type==\"PSS_ColorMasterbatch\"))");

                    if (UIUtil.isNotNullAndNotEmpty(strConnectedGenericMaterial) && "False".equalsIgnoreCase(strConnectedGenericMaterial)) {
                        sbTemp.append(" || (attribute[").append(TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE).append("]==Generic)");
                    }
                }

                String strWhere = sbTemp.toString();

                MapList mlMaterials = DomainObject.findObjects(context, typePattern.getPattern(), TigerConstants.VAULT_VPLM, strWhere, selectList);

                ChangeUtil changeUtil = new ChangeUtil();
                slResultedMaterials = changeUtil.getStringListFromMapList(mlMaterials, DomainConstants.SELECT_ID);
            }

        } catch (Exception ex) {
            logger.error("Error in includeMaterialsForSpecificMaterial: ", ex);
        }

        if (slResultedMaterials.isEmpty()) {
            slResultedMaterials.addElement(" ");
        }
        return slResultedMaterials;
    }

    /**
     * To include Materials for Specific Material
     * @param context
     * @param args
     * @return StringList
     * @throws Exception
     */
    @SuppressWarnings("rawtypes")
    public String validatingMaterialObjects(Context context, String[] args) throws Exception {
        String strErrorMessgae = "";
        try {
            HashMap paramMap = (HashMap) JPO.unpackArgs(args);

            String[] objIdsArray = (String[]) paramMap.get("objectIds");
            String contextObjId = (String) paramMap.get("contextObjId");
            if (objIdsArray != null && objIdsArray.length > 0) {
                DomainObject domMaterialObject = DomainObject.newInstance(context, contextObjId);
                String strType = domMaterialObject.getInfo(context, DomainConstants.SELECT_TYPE);
                StringList slObjSelects = new StringList();
                slObjSelects.addElement(DomainConstants.SELECT_NAME);
                slObjSelects.addElement("attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");
                MapList mlMaterials = DomainObject.getInfo(context, objIdsArray, slObjSelects);
                StringList slObjNames = new StringList();
                int mlSize = mlMaterials.size();
                int count = 0;
                for (int i = 0; i < mlSize; i++) {
                    Map tempMap = (Map) mlMaterials.get(i);
                    String strSelectedAttrMaterialType = (String) tempMap.get("attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");
                    if ("Generic".equalsIgnoreCase(strSelectedAttrMaterialType)) {
                        slObjNames.addElement((String) tempMap.get(DomainConstants.SELECT_NAME));
                        count++;
                    } else if (TigerConstants.TYPE_PSS_COLORMASTERBATCH.equalsIgnoreCase(strType) && "Specific".equalsIgnoreCase(strSelectedAttrMaterialType)) {
                        slObjNames.addElement((String) tempMap.get(DomainConstants.SELECT_NAME));
                        count++;
                    }
                }

                if (count > 1) {
                    if (TigerConstants.TYPE_PSS_COLORMASTERBATCH.equalsIgnoreCase(strType)) {
                        strErrorMessgae = MessageUtil.getMessage(context, null, "PSS_FRCMBOMCentral.Alert.ValidatingColorMasterBatchMaterial", new String[] { "materialObjs" },
                                new String[] { FrameworkUtil.join(slObjNames, " , ") }, null, context.getLocale(), "emxFRCMBOMCentralStringResources");
                    } else {
                        strErrorMessgae = MessageUtil.getMessage(context, null, "PSS_FRCMBOMCentral.Alert.ValidatingGenericMaterialObjects", new String[] { "materialObjs" },
                                new String[] { FrameworkUtil.join(slObjNames, " , ") }, null, context.getLocale(), "emxFRCMBOMCentralStringResources");
                    }
                }
            }

        } catch (Exception ex) {
            logger.error("Error in validatingMaterialObjects: ", ex);
        }
        return strErrorMessgae;
    }

    /**
     * To include Materials for Specific Material
     * @param context
     * @param args
     * @return StringList
     * @throws Exception
     */
    @SuppressWarnings("rawtypes")
    public StringList excludeConnectedMaterials(Context context, String[] args) throws Exception {
        StringList slExcludeMaterials = new StringList();
        try {
            HashMap paramMap = (HashMap) JPO.unpackArgs(args);
            String strObjectId = (String) paramMap.get("objectId");

            if (UIUtil.isNotNullAndNotEmpty(strObjectId)) {
                DomainObject domMaterial = DomainObject.newInstance(context, strObjectId);
                slExcludeMaterials = domMaterial.getInfoList(context, "from[" + TigerConstants.RELATIONSHIP_PSS_RELATEDMATERIALS + "].to.id");
                slExcludeMaterials.addElement(strObjectId);
            }

        } catch (Exception ex) {
            logger.error("Error in excludeConnectedMaterials: ", ex);
        }
        return slExcludeMaterials;
    }

    // Added for TIGTK-7230: Harika Varanasi:Phase-2.0:Ends
    // MBOM: PHASE2.0 : TIGTK-7236 : PSE : 14-July-2017 : START
    /**
     * @description: Update Function to update the Color Name value of Material.
     * @name updateColorName
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @Created By : psalunke
     * @Created on : 14-July-2017
     */
    public void updateColorName(Context context, String[] args) throws Exception {
        boolean contextPushed = false;
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            HashMap paramMap = (HashMap) programMap.get("paramMap");
            String strMaterialId = (String) paramMap.get("objectId");
            if (UIUtil.isNotNullAndNotEmpty(strMaterialId)) {
                DomainObject domMaterialObject = DomainObject.newInstance(context, strMaterialId);
                // Get access mask of material object
                Access contextAccess = domMaterialObject.getAccessMask(context);
                // Check Material have modify access
                if (!contextAccess.hasModifyAccess()) {
                    ContextUtil.pushContext(context, PropertyUtil.getSchemaProperty(context, "User Agent"), DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
                    contextPushed = true;
                }
                String strNewColorName = (String) paramMap.get("New Value");
                // Set new value of color name
                domMaterialObject.setAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_COLORNAME, strNewColorName);
            }
        } catch (Exception e) {
            logger.error("Error in pss.cadbom.Material : updateColorName() : ", e);
            throw e;
        } finally {
            if (contextPushed) {
                ContextUtil.popContext(context);
            }
        }
    }

    // MBOM: PHASE2.0 : TIGTK-7236 : PSE : 14-July-2017 : END
    // Added for Major Revision Updation:PKH:Start
    /**
     * Get Major Revision on the Property page of Material
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author
     */

    public String getMajorRevisionForMaterial(Context context, String[] args) throws Exception {
        String returnValue = DomainConstants.EMPTY_STRING;
        try {

            Map programMap = (HashMap) JPO.unpackArgs(args);
            Map requestMap = (Map) programMap.get("requestMap");
            Map fieldMap = (Map) programMap.get("fieldMap");
            String fieldName = (String) fieldMap.get("name");

            String strObjectId = (String) requestMap.get("objectId");
            DomainObject dmoObject = new DomainObject(strObjectId);
            if ("Revision".equalsIgnoreCase(fieldName)) {
                String majorRev = dmoObject.getInfo(context, "majorrevision");
                returnValue = majorRev;
            }
        } catch (Exception e) {
            logger.error("Error in pss.cadbom.Material : getMajorRevisionForMaterial() : ", e);
            throw e;
        }
        return returnValue;
    }

    /**
     * Get Major Revision on the Revision table of Material
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author
     */
    public Vector getMajorRevisionOnReviseMaterial(Context context, String[] args) throws Exception {
        Vector vecResult = new Vector();

        try {

            Map programMap = (HashMap) JPO.unpackArgs(args);
            Map columnMap = (Map) programMap.get("columnMap");
            String columnName = (String) columnMap.get("name");

            MapList relBusObjPageList = (MapList) programMap.get("objectList");

            for (int i = 0; i < relBusObjPageList.size(); i++) {
                Map objDetails = (Map) relBusObjPageList.get(i);
                String strObjectId = (String) objDetails.get("id");
                DomainObject dmoObject = new DomainObject(strObjectId);
                String typeRelatedAttribute = MqlUtil.mqlCommand(context, "print bus " + strObjectId + " select *");
                if ("Revision".equalsIgnoreCase(columnName)) {
                    String majorRev = (String) dmoObject.getInfo(context, "majorrevision");
                    vecResult.add(majorRev);
                }
            }

        } catch (Exception e) {
            logger.error("Error in pss.cadbom.Material : getMajorRevisionForMaterial() : ", e);
            throw e;
        }
        return vecResult;
    }

    /**
     * reviseMaterial method
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author
     */
    public String reviseMaterial(Context context, String args[]) throws Exception {
        String strObjectId = DomainObject.EMPTY_STRING;
        String strCurrentUser = DomainConstants.EMPTY_STRING;
        String MATERIALREVISEACTION = "MATERIALREVISEACTION";
        boolean bFlag = false;
        try {
            strCurrentUser = context.getUser();
            PropertyUtil.setRPEValue(context, MATERIALREVISEACTION, strCurrentUser, true);
            // PTE TIGTK-7253 : 04/08/2017 : Start
            ContextUtil.pushContext(context, PropertyUtil.getSchemaProperty(context, "User Agent"), DomainConstants.EMPTY_STRING, DomainConstants.EMPTY_STRING);
            bFlag = true;
            // PTE TIGTK-7253 : 04/08/2017 : END
            strObjectId = replaceNewRevisionMaterial(context, args);

            if (UIUtil.isNotNullAndNotEmpty(strObjectId)) {
                DomainObject dObj = DomainObject.newInstance(context, strObjectId);
                dObj.setOwner(context, strCurrentUser);
            }
        } catch (Exception e) {
            logger.error("Error in reviseMaterial: ", e);
        } finally {
            PropertyUtil.setRPEValue(context, MATERIALREVISEACTION, strCurrentUser, true);
            if (bFlag)
                ContextUtil.popContext(context);

        }
        return strObjectId;
    }

    /**
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author
     */
    public String replaceNewRevisionMaterial(Context context, String[] args) throws Exception {
        String returnValue = "";

        PLMCoreModelerSession plmSession = null;
        try {
            context.setApplication("VPLM");
            plmSession = PLMCoreModelerSession.getPLMCoreModelerSessionFromContext(context);
            plmSession.openSession();
            // TIGTK-7253 : HT : 18/08/2017 : Start
            ContextUtil.startTransaction(context, true);
            String childRefPID = args[0];
            String newChildRefPID = newRevisionMaterial(context, plmSession, childRefPID);
            returnValue = newChildRefPID;

            flushAndCloseSession(plmSession);
            if (context.isTransactionActive()) {
                ContextUtil.commitTransaction(context);
            }

        } catch (Exception exp) {
            exp.printStackTrace();
            flushAndCloseSession(plmSession);
            if (context.isTransactionActive()) {
                ContextUtil.commitTransaction(context);
            }
            // TIGTK-7253 : HT : 18/08/2017 : End
            throw exp;
        }

        return returnValue;
    }

    /**
     * newRevisionMaterial
     * @param context
     * @param plmSession
     * @param refPID
     * @return
     * @throws Exception
     * @author
     */
    public String newRevisionMaterial(Context context, PLMCoreModelerSession plmSession, String refPID) throws Exception {
        // Get the latest existing revision (the one given is not necessarily the latest one)
        String latestRevisionPIDsStr = MqlUtil.mqlCommand(context, "print bus " + refPID + " select majorids.lastmajorid dump |", false, false);
        String[] latestRevisionPIDs = latestRevisionPIDsStr.split("\\|");
        String latestRevisionPID = latestRevisionPIDs[0];
        ContextUtil.pushContext(context, PropertyUtil.getSchemaProperty(context, "person_UserAgent"), "", "");
        MqlUtil.mqlCommand(context, "mod bus " + latestRevisionPID + " PLMReference.V_VersionID " + latestRevisionPID, false, false);
        ContextUtil.popContext(context);
        String latestRevisionPID1 = FRCMBOMModelerAPI.newRevisionManufItem(context, latestRevisionPID);
        return latestRevisionPID1;
    }

    public static void flushAndCloseSession(PLMCoreModelerSession plmSession) {
        try {
            plmSession.flushSession();
        } catch (Exception e) {
        }

        try {
            plmSession.closeSession(true);
        } catch (Exception e) {
        }
    }

    /**
     * getObjectMajorRevisions
     * @param context
     * @param args
     * @return
     * @throws Exception
     * @author
     */
    public MapList getObjectMajorRevisions(Context context, String[] args) throws Exception {
        MapList revisionList = null;
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String objectId = (String) programMap.get("objectId");
            DomainObject domObj = DomainObject.newInstance(context, objectId);
            String strObjName = domObj.getInfo(context, DomainConstants.SELECT_NAME);
            StringList busSelects = new StringList(1);
            busSelects.add(DomainConstants.SELECT_ID);
            String strWhere = "minorrevision == 1";

            revisionList = DomainObject.findObjects(context, "*", // Type Pattern
                    strObjName, // Name Pattern
                    DomainConstants.QUERY_WILDCARD, // Rev Pattern
                    null, // Owner Pattern
                    TigerConstants.VAULT_VPLM, // Vault Pattern
                    strWhere, // Where Expression
                    false, // Expand Type
                    busSelects); // Object Pattern

        } catch (Exception ex) {
            throw ex;
        }
        return revisionList;
    }

    // Added for Major Revision Updation:PKH:End

    /**
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public int notifyOriginatorForNewMaterialRevision(Context context, String args[]) throws Exception {
        try {
            // This method witll send notification to all connected Parts/Mbom owners
            String strObjectId = args[0]; // Object Id of Material
            DomainObject domObject = new DomainObject(strObjectId);
            String strMaterialName = args[1];
            String strMaterialRev = args[2];
            BusinessObject boPreviousRevision = domObject.getPreviousRevision(context);

            if (boPreviousRevision.exists(context)) {

                String strPreviousRevID = boPreviousRevision.getObjectId(context);
                DomainObject prevObj = new DomainObject(strPreviousRevID);
                String strLanguage = context.getSession().getLanguage();
                String strMessageSubject = EnoviaResourceBundle.getProperty(context, "emxFRCMBOMCentralStringResources", new Locale(strLanguage),
                        "PSS_FRCMBOMCentral.Message.Subject.NewMaterialRevision");
                String strMessageBody = EnoviaResourceBundle.getProperty(context, "emxFRCMBOMCentralStringResources", new Locale(strLanguage), "PSS_FRCMBOMCentral.Message.Body.NewMaterialRevision");

                Pattern relationshipPattern = new Pattern(TigerConstants.RELATIONSHIP_PSS_MATERIAL);
                relationshipPattern.addPattern(TigerConstants.RELATIONSHIP_PROCESS_INSTANCE_CONTINUOUS);

                Pattern typePattern = new Pattern(DomainConstants.TYPE_PART);
                typePattern.addPattern(TigerConstants.TYPE_CREATEMATERIAL);
                typePattern.addPattern(TigerConstants.TYPE_CREATEKIT);
                typePattern.addPattern(TigerConstants.TYPE_CREATEASSEMBLY);
                StringList objectSelects = new StringList();
                objectSelects.add(DomainConstants.SELECT_ID);
                objectSelects.add(DomainConstants.SELECT_NAME);
                objectSelects.add(DomainConstants.SELECT_TYPE);
                objectSelects.add(DomainConstants.SELECT_REVISION);
                objectSelects.add(DomainConstants.SELECT_ORIGINATOR);
                // TIGTK-7253 : HT : START
                objectSelects.add(DomainConstants.SELECT_OWNER);
                objectSelects.add("attribute[PLMEntity.V_Name]");
                String whereClause = "(current==InWork || current==Released || current==Create || current==Complete || current==Preliminary || current==Release || current=='In Work' )";
                MapList mlEBOM_MBOM = prevObj.getRelatedObjects(context, relationshipPattern.getPattern(), //
                        typePattern.getPattern(), //
                        objectSelects, // ID,Name,Type,Originator, attribute[PLMEntity.V_Name]
                        null, // null
                        true, // true
                        false, // false
                        (short) 1, // 1
                        whereClause, // whereClause
                        "", //
                        0); // 0
                int noOfParts = mlEBOM_MBOM.size();

                if (noOfParts > 0) {
                    Iterator itr = mlEBOM_MBOM.iterator();

                    while (itr.hasNext()) {
                        Map tempMap = (Map) itr.next();

                        String strType = (String) tempMap.get(DomainConstants.SELECT_TYPE);
                        String strObjectPartId = (String) tempMap.get(DomainConstants.SELECT_ID);
                        String strOriginator = (String) tempMap.get(DomainConstants.SELECT_ORIGINATOR);
                        if (UIUtil.isNullOrEmpty(strOriginator))
                            strOriginator = (String) tempMap.get(DomainConstants.SELECT_OWNER);

                        // TIGTK-7253 : HRT : END
                        String strRevision = (String) tempMap.get(DomainConstants.SELECT_REVISION);
                        String strName = "";

                        if (strType.equals("Part")) {
                            strName = (String) tempMap.get(DomainConstants.SELECT_NAME);
                        } else {
                            strName = (String) tempMap.get("attribute[PLMEntity.V_Name]");
                        }
                        String messageBody = MessageFormat.format(strMessageBody, strName, strRevision, strMaterialName, strMaterialName, strMaterialRev);

                        StringList slPersonMailNotification = new StringList();
                        slPersonMailNotification.add(strOriginator);
                        MailUtil.sendNotification(context, slPersonMailNotification, // toList - Originator
                                null, // ccList
                                null, // bccList
                                strMessageSubject, // subjectKey
                                null, // subjectKeys
                                null, // subjectValues
                                messageBody, // messageKey
                                null, // messageKeys
                                null, // messageValues
                                null, // objectIdList
                                null);

                    }

                }

            }
        } catch (Exception e) {

            logger.error("Error in notifyOriginatorForNewMaterialRevision", e);
            throw e;

        }
        return 0;
    }

    // MBOM:PHASE2.0 : TIGTK-7247 : PSE : 20-07-2017 : START
    /**
     * Method to get connected Paint System Material of Part
     * @param context
     * @param args
     * @return MapList
     * @throws Exception
     * @since 20-07-2017
     * @author psalunke
     */
    public MapList getPaintSystemMaterialOnPart(Context context, String[] args) throws Exception {
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String strPartId = (String) programMap.get("objectId");
            MapList mlMaterialList = new MapList();
            if (UIUtil.isNotNullAndNotEmpty(strPartId)) {
                DomainObject domPartObject = DomainObject.newInstance(context, strPartId);
                StringList slSelectStmts = new StringList();
                slSelectStmts.addElement(DomainConstants.SELECT_ID);
                slSelectStmts.addElement("attribute[" + TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE + "]");

                StringBuffer sbWhereExpression = new StringBuffer();
                sbWhereExpression.append("attribute[");
                sbWhereExpression.append(TigerConstants.ATTRIBUTE_PSS_PROCESSCONTINUOUSPROVIDE_PSS_MATERIALTYPE);
                sbWhereExpression.append("]==Generic");

                mlMaterialList = domPartObject.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PSS_MATERIAL, // relationship pattern
                        TigerConstants.TYPE_PSS_PAINTSYSTEM, // object pattern
                        slSelectStmts, // object selects
                        new StringList(DomainRelationship.SELECT_ID), // relationship selects
                        false, // to direction
                        true, // from direction
                        (short) 1, // recursion level
                        sbWhereExpression.toString(), // object where clause
                        null, (short) 0, false, // checkHidden
                        true, // preventDuplicates
                        (short) 1000, // pageSize
                        null, null, null, null, null);
            }
            return mlMaterialList;
        } catch (Exception e) {
            logger.error("Error in PSS_emxPart : getPaintSystemMaterialOnPart() : ", e);
            throw e;
        }
    }

    /**
     * This method is used to visible field on property page.
     * @param context
     * @param args
     * @return
     * @throws Exception
     *             if the operation fails
     */
    public Boolean isVisibleShortLengthDescEditable(Context context, String[] args) throws Exception {
        logger.debug("pss.cadbom.Material : isVisibleShortLengthDescEditable : START");
        Boolean isVisible = true;
        try {
            HashMap<?, ?> programMap = (HashMap<?, ?>) JPO.unpackArgs(args);

            String strMode = (String) programMap.get("mode");

            if (UIUtil.isNullOrEmpty(strMode)) {
                // TIGTK-16039 : 16-07-2018 - START
                strMode = "view";
            }
            if ("view".equals(strMode)) {
                // TIGTK-16039 : 16-07-2018 - END
                isVisible = false;
            }

            logger.debug("pss.cadbom.Material : isVisibleShortLengthDescEditable : END");
        } catch (Exception e) {
            logger.error("pss.cadbom.Material : isVisibleShortLengthDescEditable : ERROR ", e);

            throw e;
        }
        return isVisible;
    }

    /**
     * This method is used to visible field on property page.
     * @param context
     * @param args
     * @return
     * @throws Exception
     *             if the operation fails
     */
    public Boolean isVisibleShortLengthDescView(Context context, String[] args) throws Exception {
        logger.debug("pss.cadbom.Material : isVisibleShortLengthDescView : START");
        Boolean isVisible = false;
        try {
            HashMap<?, ?> programMap = (HashMap<?, ?>) JPO.unpackArgs(args);

            String strMode = (String) programMap.get("mode");
            if (UIUtil.isNullOrEmpty(strMode)) {
                // TIGTK-16039 : 16-07-2018 - START
                strMode = "view";
            }
            if ("view".equals(strMode)) {
                // TIGTK-16039 : 16-07-2018 - END
                isVisible = true;
            }

            logger.debug("pss.cadbom.Material : isVisibleShortLengthDescView : END");
        } catch (Exception e) {
            logger.error("pss.cadbom.Material : isVisibleShortLengthDescView : ERROR ", e);

            throw e;
        }
        return isVisible;
    }

    /**
     * This method is used to as postProcess For Edit Material
     * @param context
     * @param args
     * @return
     * @throws Exception
     *             if the operation fails
     */
    public void populateAutoDescriptionForShortDesc(Context context, String[] args) throws Exception {
        logger.debug("pss.cadbom.Material : postProcessForMaterial : START");
        StringBuffer sbValue = new StringBuffer();
        try {

            String strMaterialObjectID = args[0];

            DomainObject domMaterailObject = DomainObject.newInstance(context, strMaterialObjectID);
            Map map = domMaterailObject.getAttributeMap(context);

            StringList slSelectsList = new StringList();
            slSelectsList.add("attribute[" + TigerConstants.ATTRIBUTE_PSS_TRADE_NAME + "]");
            slSelectsList.add("attribute[" + TigerConstants.ATTRIBUTE_PSS_SUPPLIER + "]");
            slSelectsList.add("attribute[" + TigerConstants.ATTRIBUTE_FAURECIA_SHORT_LENGTH_DESC + "]");
            Map<String, String> mpAttributeInfo = domMaterailObject.getInfo(context, slSelectsList);

            String strTradeName = mpAttributeInfo.get("attribute[" + TigerConstants.ATTRIBUTE_PSS_TRADE_NAME + "]");
            String strSupplier = mpAttributeInfo.get("attribute[" + TigerConstants.ATTRIBUTE_PSS_SUPPLIER + "]");
            String strShortLengthDesc = mpAttributeInfo.get("attribute[" + TigerConstants.ATTRIBUTE_FAURECIA_SHORT_LENGTH_DESC + "]");

            if (UIUtil.isNullOrEmpty(strTradeName) && UIUtil.isNotNullAndNotEmpty(strSupplier)) {

                sbValue.append(strSupplier);
            } else if (UIUtil.isNotNullAndNotEmpty(strTradeName) && UIUtil.isNullOrEmpty(strSupplier)) {
                sbValue.append(strTradeName);
            } else if (UIUtil.isNotNullAndNotEmpty(strTradeName) && UIUtil.isNotNullAndNotEmpty(strSupplier)) {
                sbValue.append(strSupplier);
                sbValue.append(" ");
                sbValue.append(strTradeName);

            }

            else if (UIUtil.isNullOrEmpty(strSupplier) && UIUtil.isNullOrEmpty(strTradeName)) {
                sbValue.append("");
            }

            if (!map.containsKey(TigerConstants.ATTRIBUTE_PSS_TRADE_NAME) && !map.containsKey(TigerConstants.ATTRIBUTE_PSS_SUPPLIER)) {
                sbValue.append(strShortLengthDesc);
            }

            domMaterailObject.setAttributeValue(context, TigerConstants.ATTRIBUTE_FAURECIA_SHORT_LENGTH_DESC, sbValue.toString());
            logger.debug("pss.cadbom.Material : postProcessForMaterial : END");
        } catch (Exception e) {
            logger.error("pss.cadbom.Material : postProcessForMaterial : ERROR ", e);

            throw e;
        }

    }

    public static void flushSession(PLMCoreModelerSession plmSession) {
        try {
            plmSession.flushSession();
        } catch (Exception e) {
        }
    }

    // TIGTK-11355:RE:8/12/2017:Start
    /****
     * this method called from check trigger on PSS_Material relationship create for checking revision of Material for requirement of only One material revision was added on Part.
     * @param context
     * @param args
     * @return
     * @throws Exception
     */
    public int checkMaterialRevisionConnected(Context context, String[] args) throws Exception {

        try {
            String strLanguage = context.getSession().getLanguage();
            String strFromObjectId = args[0];
            DomainObject domPartObject = DomainObject.newInstance(context, strFromObjectId);

            StringList lstselectStmts = new StringList(1);
            lstselectStmts.addElement("physicalid");

            Pattern typePattern = new Pattern(TigerConstants.TYPE_PROCESSCONTINUOUSPROVIDE);
            typePattern.addPattern(TigerConstants.TYPE_PROCESS_CONTINUOUS_CREATE_MATERIAL);

            MapList mlobjMapList = domPartObject.getRelatedObjects(context, TigerConstants.RELATIONSHIP_PSS_MATERIAL, // relationship pattern
                    typePattern.getPattern(), // object pattern
                    lstselectStmts, // object selects
                    null, // relationship selects
                    false, // to direction
                    true, // from direction
                    (short) 1, // recursion level
                    null, // object where clause
                    null, 0);
            if (mlobjMapList != null && !mlobjMapList.isEmpty()) {
                String strToObjectId = args[1];
                DomainObject domSelectedMaterialObject = DomainObject.newInstance(context, strToObjectId);
                ChangeUtil changeUtil = new ChangeUtil();
                StringList slConnectedMaterialIds = changeUtil.getStringListFromMapList(mlobjMapList, "physicalid");
                StringList slSelectedRevisionIds = domSelectedMaterialObject.getInfoList(context, "majorids");
                for (int i = 0; i < slSelectedRevisionIds.size(); i++) {
                    if (slConnectedMaterialIds.contains(slSelectedRevisionIds.get(i))) {
                        String strResult = EnoviaResourceBundle.getProperty(context, "emxFRCMBOMCentralStringResources", new Locale(strLanguage),
                                "PSS_FRCMBOMCentral.Message.Alert.MaterialRevisionAleadyConnected");
                        String strName = domSelectedMaterialObject.getInfo(context, DomainConstants.SELECT_NAME);
                        strResult = strResult.replace("$<name>", strName);
                        MqlUtil.mqlCommand(context, "notice $1", strResult);
                        return 1;
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Error in checkMaterialRevisionConnected: ", e);
            throw e;
        }
        return 0;
    }

    // TIGTK-11355:RE:8/12/2017:End
    public void setTechnologyAttributeValue(Context context, String[] args) throws Exception {
        try {

            String strToObjectId = args[1];
            String strfromObjectId = args[0];

            DomainObject domTodMaterialObject = DomainObject.newInstance(context, strToObjectId);
            DomainObject domfromdMaterialObject = DomainObject.newInstance(context, strfromObjectId);
            String strChildClassification = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentral.Attributes.TechnologyChildList");
            String strParentClassification = EnoviaResourceBundle.getProperty(context, "emxEngineeringCentral.Attributes.TechnologyParentList");

            String strClassificationChildId = domTodMaterialObject.getInfo(context, "to[" + DomainConstants.RELATIONSHIP_CLASSIFIED_ITEM + "]." + DomainConstants.SELECT_FROM_NAME);
            String strClassificationParentId = domfromdMaterialObject.getInfo(context, "to[" + DomainConstants.RELATIONSHIP_CLASSIFIED_ITEM + "]." + DomainConstants.SELECT_FROM_NAME);

            StringList slChildAttributeListChild = FrameworkUtil.split(strChildClassification, ",");

            if (slChildAttributeListChild.contains(strClassificationChildId)) {

                String strChildTechnology = domTodMaterialObject.getInfo(context, "attribute[" + TigerConstants.ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL + "]");
                String strChildCrosslinking = domTodMaterialObject.getInfo(context, "attribute[" + TigerConstants.ATTRIBUTE_PSS_CROSSLINKING + "]");
                StringList slParentAttributeList = FrameworkUtil.split(strParentClassification, ",");

                if (slParentAttributeList.contains(strClassificationParentId)) {

                    if (UIUtil.isNotNullAndNotEmpty(strChildTechnology) && !strChildTechnology.equals("TBC"))
                        domfromdMaterialObject.setAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_TECHNOLOGYFORMATERIAL, strChildTechnology);

                    if (UIUtil.isNotNullAndNotEmpty(strChildCrosslinking) && strChildCrosslinking.equals("TBD"))
                        domfromdMaterialObject.setAttributeValue(context, TigerConstants.ATTRIBUTE_PSS_CROSSLINKING, strChildCrosslinking);

                }

            }

        } catch (Exception ex) {
            logger.error("Error in setInstanceAttributeValue: ", ex);
            throw ex;
        }
    }

    /**
     * This Method is added for Showing Add Existing command to Admin User
     * @param context
     * @param args
     * @return
     * @throws Exception
     */

    public static Boolean hasVisibleToAdmin(Context context, String[] args) throws Exception {
        boolean bValidUser = false;
        String userName = context.getUser();
        String strLoggedUserSecurityContext = PersonUtil.getDefaultSecurityContext(context, userName);
        String assignedRoles = (strLoggedUserSecurityContext.split("[.]")[0]);

        if (assignedRoles.equalsIgnoreCase(TigerConstants.ROLE_PSS_GLOBAL_ADMINISTRATOR) || assignedRoles.equalsIgnoreCase(TigerConstants.ROLE_PSS_PLM_SUPPORT_TEAM)) {
            bValidUser = true;
        }
        return bValidUser;
    }

    /**
     * This Method is added for Showing Add Existing And Remove command to Non Admin User
     * @param context
     * @param args
     * @return
     * @throws Exception
     */

    public static Boolean hasVisibleToNonAdmin(Context context, String[] args) throws Exception {
        boolean bValidUser = true;
        String userName = context.getUser();
        String strLoggedUserSecurityContext = PersonUtil.getDefaultSecurityContext(context, userName);
        String assignedRoles = (strLoggedUserSecurityContext.split("[.]")[0]);
        if (assignedRoles.equalsIgnoreCase(TigerConstants.ROLE_PSS_GLOBAL_ADMINISTRATOR) || assignedRoles.equalsIgnoreCase(TigerConstants.ROLE_PSS_PLM_SUPPORT_TEAM)) {
            bValidUser = false;
        }
        return bValidUser;
    }
}
